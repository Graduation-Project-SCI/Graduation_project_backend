datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Professor {
  id                  Int                   @id @default(autoincrement())
  fullName            String
  email               String                @unique
  password            String
  specialty           String?
  phoneNumber         String?
  image               String?
  token               String?
  posistionsNumper    Int                   @default(0)
  createdAt           DateTime              @default(now())
  departmentId        Int
  department          Department            @relation("ProfessorDepartment", fields: [departmentId], references: [id])
  professorAttachment Professor_attachment? @relation("HasAttachment")
  MasterResearch      Research[]            @relation("ResearchSupervisor")
  ProfessorResearch   Research[]            @relation("ResearchAuthor")
  GraduationProject   Project[]             @relation("ProjectAuthor")
  ProfessorProject    Project[]             @relation("ProjectSupervisor")
  Posistions          Positions[]           @relation("PositionsProfessor")
  responses           Response[]
  userServay          userServay[]
}

model Professor_attachment {
  id               Int       @id @default(autoincrement())
  ssn              Int
  degreeDate       Int
  degreeUniversity String
  gender           Gender
  degree           Degree
  professorId      Int       @unique
  professor        Professor @relation("HasAttachment", fields: [professorId], references: [id])
}

model Research {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdBy       String
  pagesNumper     Int
  publisher       String
  magazinName     String
  magazinVolume   String
  publishYear     Int
  majoring        String
  ProfessorRole   Professor_role
  type            Type
  departmentId    Int
  department      Department     @relation("ResearchDepartment", fields: [departmentId], references: [id])
  masterStudentId Int
  masterStudent   Student        @relation("ResearchStudent", fields: [masterStudentId], references: [studentId])
  author          Professor      @relation("ResearchAuthor", fields: [authorId], references: [id])
  authorId        Int
  supervisor      Professor      @relation("ResearchSupervisor", fields: [supervisorId], references: [id])
  supervisorId    Int
}

model Project {
  projectId     Int            @id @default(autoincrement())
  projectName   String
  description   String
  topic         String
  startDate     DateTime
  endDate       DateTime
  status        String
  createdBy     String
  affiliate     String
  type          Type
  ProfessorRole Professor_role
  departmentId  Int
  department    Department     @relation("ProjectDepartment", fields: [departmentId], references: [id])
  author        Professor      @relation("ProjectAuthor", fields: [authorId], references: [id])
  authorId      Int
  supervisor    Professor      @relation("ProjectSupervisor", fields: [supervisorId], references: [id])
  supervisorId  Int
}

model Student {
  studentId       Int        @id @default(autoincrement())
  studentName     String
  studentCode     Int
  StudentResearch Research[] @relation("ResearchStudent")
}

model Positions {
  positionId  Int           @id @default(autoincrement())
  name        String
  type        Position_Type
  professorId Int
  professor   Professor     @relation("PositionsProfessor", fields: [professorId], references: [id])
}

model Department {
  id                  Int         @id @default(autoincrement())
  name                String
  ProfessorDepartment Professor[] @relation("ProfessorDepartment")
  ResearchDepartment  Research[]  @relation("ResearchDepartment")
  ProjectDepartment   Project[]   @relation("ProjectDepartment")
}

model Servay {
  id        Int        @id @default(autoincrement())
  name      String
  questions Question[]
  userServay userServay[]
}

model userServay {
  id       Int        @id @default(autoincrement())
  servay   Servay     @relation(fields: [servayId], references: [id])
  servayId Int
  user     Professor       @relation(fields: [professorId], references: [id])
  professorId   Int
  complete Boolean    @default(false)
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  answers Answer[]
  servay  Servay   @relation(fields: [servayId], references: [id])
  servayId Int
}

model Answer {
  id         Int        @id @default(autoincrement())
  text       String
  question   Question   @relation(fields: [questionId], references: [id])
  questionId Int
  responses  Response[]
}

model Response {
  id          Int       @id @default(autoincrement())
  answer      Answer    @relation(fields: [answerId], references: [id])
  answerId    Int
  Professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int
}

enum Type {
  Master
  GraduationProject
}

enum Position_Type {
  Internal_position
  External_position
}

enum Internal_position {
  University_President
  Vice_President_of_the_University
  Dean
  College_agent
  Head_of_the_Department
  Program_coordinator
  Faculty_committee_member
  Department_committee_member
  Department_council_member
}

enum External_position {
  minister
  Deputy_Minister
  Head_of_a_department_in_the_ministry
  Member_of_the_General_Assembly
}

enum Professor_role {
  author
  supervisor
}

enum Degree {
  Assistant
  Associate
  Full
  Emeritus
}

enum Gender {
  Male
  Female
}
