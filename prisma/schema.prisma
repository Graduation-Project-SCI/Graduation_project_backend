datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Professor {
  id                  Int                   @id @default(autoincrement())
  fullName            String
  email               String                @unique
  password            String
  specialty           String?
  phoneNumber         String?
  image               String?
  token               String?
  posistionsNumper    Int                   @default(0)
  createdAt           DateTime              @default(now())
  departmentId        Int
  department          Department            @relation("ProfessorDepartment", fields: [departmentId], references: [id])
  professorAttachment Professor_attachment? @relation("HasAttachment")
  MasterResearch      Research[]            @relation("ResearchSupervisor")
  ProfessorResearch   Research[]            @relation("ResearchAuthor")
  GraduationProject   Project[]             @relation("ProjectAuthor")
  ProfessorProject    Project[]             @relation("ProjectSupervisor")
  Posistions          Positions[]          @relation("PositionsProfessor")
}

model Professor_attachment {
  id               Int    @id @default(autoincrement())
  ssn              Int
  degreeDate       Int
  degreeUniversity String

  gender      Gender
  degree      Degree
  professorId Int       @unique
  professor   Professor @relation("HasAttachment", fields: [professorId], references: [id])
}

enum Degree {
  Assistant
  Associate
  Full
  Emeritus
}

enum Gender {
  Male
  Female
}

model Research {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdBy       String
  pagesNumper     Int
  publisher       String
  magazinName     String
  magazinVolume   String
  publishYear     Int
  majoring        String
  ProfessorRole   Professor_role
  masterStudentId Int
  departmentId    Int
  masterStudent   Student        @relation("ResearchStudent", fields: [masterStudentId], references: [studentId])
  type            Type
  department      Department     @relation("ResearchDepartment", fields: [departmentId], references: [id])
  author          Professor      @relation("ResearchAuthor", fields: [authorId], references: [id])
  authorId        Int
  supervisor      Professor      @relation("ResearchSupervisor", fields: [supervisorId], references: [id])
  supervisorId    Int
}

model Project {
  projectId       Int            @id @default(autoincrement())
  projectName     String
  description     String
  topic           String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdBy       String
  affiliate       String
  type            Type
  departmentId    Int
  department      Department     @relation("ProjectDepartment", fields: [departmentId], references: [id])
  professorRoleId Int            @unique
  ProfessorRole   Professor_role
  author          Professor      @relation("ProjectAuthor", fields: [authorId], references: [id])
  authorId        Int
  supervisor      Professor      @relation("ProjectSupervisor", fields: [supervisorId], references: [id])
  supervisorId    Int
}

model Student {
  studentId       Int        @id @default(autoincrement())
  studentName     String
  studentCode     Int
  StudentResearch Research[] @relation("ResearchStudent")
}

model Positions {
  positionId Int            @id @default(autoincrement())
  name        String
  type        Position_Type
  professorId Int
  professor   Professor      @relation("PositionsProfessor", fields: [professorId], references: [id])
}

enum Type {
  Master
  GraduationProject
}

enum Position_Type {
  Internal_position
  External_position
}

enum Internal_position {
  University_President
  Vice_President_of_the_University
  Dean
  College_agent
  Head_of_the_Department
  Program_coordinator
  Faculty_committee_member
  Department_committee_member
  Department_council_member
}

enum External_position {
  minister
  Deputy_Minister
  Head_of_a_department_in_the_ministry
  Member_of_the_General_Assembly
}

model Department {
  id                  Int         @id @default(autoincrement())
  name                String
  ProfessorDepartment Professor[] @relation("ProfessorDepartment")
  ResearchDepartment  Research[]  @relation("ResearchDepartment")
  ProjectDepartment   Project[]   @relation("ProjectDepartment")
}

enum Professor_role {
  author
  supervisor
}

model Servay {
  id          Int @id @default(autoincrement())
  professorId Int
  rateId      Int
  questionId  Int
}

model Rate {
  id       Int    @id @default(autoincrement())
  rateType String
  avareage String
}

model Question {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}
