datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Professor {
  id                Int                   @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String                @unique
  password          String
  specialty         String?
  phoneNumber       String?
  image             String?
  token             String
  departmentId      Int                   @unique
  department        Department            @relation("ProfessorDepartment", fields: [departmentId], references: [id])
  professorHas      Professor_attachment? @relation("HasAttachment")
  MasterResearch    Research[]            @relation("ResearchSupervisor")
  ProfessorResearch Research[]            @relation("ResearchAuthor")
  GraduationProject Project[]             @relation("ProjectAuthor")
  ProfessorProject  Project[]             @relation("ProjectSupervisor")
  DepartmentHead    Department?           @relation("DepartmentHead")
}

model Professor_attachment {
  id          Int       @id @default(autoincrement())
  ssn         Int
  gender      String
  degreeDate  DateTime
  degreeId    Int       @unique
  degree      Degree    @relation("HisDegree", fields: [degreeId], references: [id])
  professorId Int       @unique
  professor   Professor @relation("HasAttachment", fields: [professorId], references: [id])
}

model Degree {
  id              Int                   @id @default(autoincrement())
  name            String
  university      String
  ProfessorDegree Professor_attachment? @relation("HisDegree")
}

model Research {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdBy       String
  pagesNumper     Int
  publisher       String
  magazinName     String
  magazinVolume   String
  publishYear     Int
  majoring        String
  typeId          Int            @unique
  type            Type           @relation("ResearchType", fields: [typeId], references: [id])
  departmentId    Int            @unique
  department      Department     @relation("ResearchDepartment", fields: [departmentId], references: [id])
  professorRoleId Int            @unique
  ProfessorRole   Professor_role @relation("ResearchProfessorRole", fields: [professorRoleId], references: [id])
  author          Professor      @relation("ResearchAuthor", fields: [authorId], references: [id])
  authorId        Int
  supervisor      Professor      @relation("ResearchSupervisor", fields: [supervisorId], references: [id])
  supervisorId    Int
}

model Project {
  projectId       Int            @id @default(autoincrement())
  projectName     String
  description     String
  topic           String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdBy       String
  affiliate       String
  typeId          Int            @unique
  type            Type           @relation("ProjectType", fields: [typeId], references: [id])
  departmentId    Int            @unique
  department      Department     @relation("ProjectDepartment", fields: [departmentId], references: [id])
  professorRoleId Int            @unique
  ProfessorRole   Professor_role @relation("ProfessorRole", fields: [professorRoleId], references: [id])
  author          Professor      @relation("ProjectAuthor", fields: [authorId], references: [id])
  authorId        Int
  supervisor      Professor      @relation("ProjectSupervisor", fields: [supervisorId], references: [id])
  supervisorId    Int
}

model Type {
  id      Int      @id @default(autoincrement())
  name    String
  Project Project? @relation("ProjectType")
  Research Research? @relation("ResearchType")
}

model Department {
  id                  Int        @id @default(autoincrement())
  name                String
  HeadId              Int        @unique
  head                Professor  @relation("DepartmentHead", fields: [HeadId], references: [id])
  ProfessorDepartment Professor? @relation("ProfessorDepartment")
  ResearchDepartment  Research?  @relation("ResearchDepartment")
  ProjectDepartment   Project?   @relation("ProjectDepartment")
}

model Professor_role {
  id       Int       @id @default(autoincrement())
  role     String
  Project  Project?  @relation("ProfessorRole")
  Research Research? @relation("ResearchProfessorRole")
}

model Servay {
  id          Int @id @default(autoincrement())
  professorId Int
  rateId      Int
  questionId  Int
}

model Rate {
  id       Int    @id @default(autoincrement())
  rateType String
  avareage String
}

model Question {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}
