
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model Professor_attachment
 * 
 */
export type Professor_attachment = $Result.DefaultSelection<Prisma.$Professor_attachmentPayload>
/**
 * Model Degree
 * 
 */
export type Degree = $Result.DefaultSelection<Prisma.$DegreePayload>
/**
 * Model Research
 * 
 */
export type Research = $Result.DefaultSelection<Prisma.$ResearchPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Type
 * 
 */
export type Type = $Result.DefaultSelection<Prisma.$TypePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Professor_role
 * 
 */
export type Professor_role = $Result.DefaultSelection<Prisma.$Professor_rolePayload>
/**
 * Model Servay
 * 
 */
export type Servay = $Result.DefaultSelection<Prisma.$ServayPayload>
/**
 * Model Rate
 * 
 */
export type Rate = $Result.DefaultSelection<Prisma.$RatePayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Professors
 * const professors = await prisma.professor.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Professors
   * const professors = await prisma.professor.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs>;

  /**
   * `prisma.professor_attachment`: Exposes CRUD operations for the **Professor_attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professor_attachments
    * const professor_attachments = await prisma.professor_attachment.findMany()
    * ```
    */
  get professor_attachment(): Prisma.Professor_attachmentDelegate<ExtArgs>;

  /**
   * `prisma.degree`: Exposes CRUD operations for the **Degree** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Degrees
    * const degrees = await prisma.degree.findMany()
    * ```
    */
  get degree(): Prisma.DegreeDelegate<ExtArgs>;

  /**
   * `prisma.research`: Exposes CRUD operations for the **Research** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Research
    * const research = await prisma.research.findMany()
    * ```
    */
  get research(): Prisma.ResearchDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.professor_role`: Exposes CRUD operations for the **Professor_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professor_roles
    * const professor_roles = await prisma.professor_role.findMany()
    * ```
    */
  get professor_role(): Prisma.Professor_roleDelegate<ExtArgs>;

  /**
   * `prisma.servay`: Exposes CRUD operations for the **Servay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servays
    * const servays = await prisma.servay.findMany()
    * ```
    */
  get servay(): Prisma.ServayDelegate<ExtArgs>;

  /**
   * `prisma.rate`: Exposes CRUD operations for the **Rate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rates
    * const rates = await prisma.rate.findMany()
    * ```
    */
  get rate(): Prisma.RateDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Professor: 'Professor',
    Professor_attachment: 'Professor_attachment',
    Degree: 'Degree',
    Research: 'Research',
    Project: 'Project',
    Type: 'Type',
    Department: 'Department',
    Professor_role: 'Professor_role',
    Servay: 'Servay',
    Rate: 'Rate',
    Question: 'Question'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'professor' | 'professor_attachment' | 'degree' | 'research' | 'project' | 'type' | 'department' | 'professor_role' | 'servay' | 'rate' | 'question'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      Professor_attachment: {
        payload: Prisma.$Professor_attachmentPayload<ExtArgs>
        fields: Prisma.Professor_attachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Professor_attachmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Professor_attachmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          findFirst: {
            args: Prisma.Professor_attachmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Professor_attachmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          findMany: {
            args: Prisma.Professor_attachmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>[]
          }
          create: {
            args: Prisma.Professor_attachmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          createMany: {
            args: Prisma.Professor_attachmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Professor_attachmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          update: {
            args: Prisma.Professor_attachmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          deleteMany: {
            args: Prisma.Professor_attachmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Professor_attachmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Professor_attachmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_attachmentPayload>
          }
          aggregate: {
            args: Prisma.Professor_attachmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessor_attachment>
          }
          groupBy: {
            args: Prisma.Professor_attachmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Professor_attachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.Professor_attachmentCountArgs<ExtArgs>,
            result: $Utils.Optional<Professor_attachmentCountAggregateOutputType> | number
          }
        }
      }
      Degree: {
        payload: Prisma.$DegreePayload<ExtArgs>
        fields: Prisma.DegreeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DegreeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DegreeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          findFirst: {
            args: Prisma.DegreeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DegreeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          findMany: {
            args: Prisma.DegreeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>[]
          }
          create: {
            args: Prisma.DegreeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          createMany: {
            args: Prisma.DegreeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DegreeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          update: {
            args: Prisma.DegreeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          deleteMany: {
            args: Prisma.DegreeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DegreeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DegreeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          aggregate: {
            args: Prisma.DegreeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDegree>
          }
          groupBy: {
            args: Prisma.DegreeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DegreeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DegreeCountArgs<ExtArgs>,
            result: $Utils.Optional<DegreeCountAggregateOutputType> | number
          }
        }
      }
      Research: {
        payload: Prisma.$ResearchPayload<ExtArgs>
        fields: Prisma.ResearchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResearchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResearchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          findFirst: {
            args: Prisma.ResearchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResearchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          findMany: {
            args: Prisma.ResearchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>[]
          }
          create: {
            args: Prisma.ResearchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          createMany: {
            args: Prisma.ResearchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResearchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          update: {
            args: Prisma.ResearchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          deleteMany: {
            args: Prisma.ResearchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResearchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResearchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          aggregate: {
            args: Prisma.ResearchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResearch>
          }
          groupBy: {
            args: Prisma.ResearchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResearchGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResearchCountArgs<ExtArgs>,
            result: $Utils.Optional<ResearchCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Type: {
        payload: Prisma.$TypePayload<ExtArgs>
        fields: Prisma.TypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findFirst: {
            args: Prisma.TypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findMany: {
            args: Prisma.TypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>[]
          }
          create: {
            args: Prisma.TypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          createMany: {
            args: Prisma.TypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          update: {
            args: Prisma.TypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          deleteMany: {
            args: Prisma.TypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          aggregate: {
            args: Prisma.TypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateType>
          }
          groupBy: {
            args: Prisma.TypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypeCountArgs<ExtArgs>,
            result: $Utils.Optional<TypeCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Professor_role: {
        payload: Prisma.$Professor_rolePayload<ExtArgs>
        fields: Prisma.Professor_roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Professor_roleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Professor_roleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          findFirst: {
            args: Prisma.Professor_roleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Professor_roleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          findMany: {
            args: Prisma.Professor_roleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>[]
          }
          create: {
            args: Prisma.Professor_roleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          createMany: {
            args: Prisma.Professor_roleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Professor_roleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          update: {
            args: Prisma.Professor_roleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          deleteMany: {
            args: Prisma.Professor_roleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Professor_roleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Professor_roleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Professor_rolePayload>
          }
          aggregate: {
            args: Prisma.Professor_roleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessor_role>
          }
          groupBy: {
            args: Prisma.Professor_roleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Professor_roleGroupByOutputType>[]
          }
          count: {
            args: Prisma.Professor_roleCountArgs<ExtArgs>,
            result: $Utils.Optional<Professor_roleCountAggregateOutputType> | number
          }
        }
      }
      Servay: {
        payload: Prisma.$ServayPayload<ExtArgs>
        fields: Prisma.ServayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          findFirst: {
            args: Prisma.ServayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          findMany: {
            args: Prisma.ServayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>[]
          }
          create: {
            args: Prisma.ServayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          createMany: {
            args: Prisma.ServayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          update: {
            args: Prisma.ServayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          deleteMany: {
            args: Prisma.ServayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServayPayload>
          }
          aggregate: {
            args: Prisma.ServayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServay>
          }
          groupBy: {
            args: Prisma.ServayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServayGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServayCountArgs<ExtArgs>,
            result: $Utils.Optional<ServayCountAggregateOutputType> | number
          }
        }
      }
      Rate: {
        payload: Prisma.$RatePayload<ExtArgs>
        fields: Prisma.RateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findFirst: {
            args: Prisma.RateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findMany: {
            args: Prisma.RateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>[]
          }
          create: {
            args: Prisma.RateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          createMany: {
            args: Prisma.RateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          update: {
            args: Prisma.RateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          deleteMany: {
            args: Prisma.RateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          aggregate: {
            args: Prisma.RateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRate>
          }
          groupBy: {
            args: Prisma.RateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RateGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateCountArgs<ExtArgs>,
            result: $Utils.Optional<RateCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    MasterResearch: number
    ProfessorResearch: number
    GraduationProject: number
    ProfessorProject: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterResearch?: boolean | ProfessorCountOutputTypeCountMasterResearchArgs
    ProfessorResearch?: boolean | ProfessorCountOutputTypeCountProfessorResearchArgs
    GraduationProject?: boolean | ProfessorCountOutputTypeCountGraduationProjectArgs
    ProfessorProject?: boolean | ProfessorCountOutputTypeCountProfessorProjectArgs
  }

  // Custom InputTypes

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountMasterResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchWhereInput
  }


  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountProfessorResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchWhereInput
  }


  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountGraduationProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountProfessorProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    id: number | null
    departmentId: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    id: number | null
    departmentId: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    specialty: string | null
    phoneNumber: string | null
    image: string | null
    token: string | null
    departmentId: number | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    specialty: string | null
    phoneNumber: string | null
    image: string | null
    token: string | null
    departmentId: number | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    specialty: number
    phoneNumber: number
    image: number
    token: number
    departmentId: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    id?: true
    departmentId?: true
  }

  export type ProfessorSumAggregateInputType = {
    id?: true
    departmentId?: true
  }

  export type ProfessorMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    specialty?: true
    phoneNumber?: true
    image?: true
    token?: true
    departmentId?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    specialty?: true
    phoneNumber?: true
    image?: true
    token?: true
    departmentId?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    specialty?: true
    phoneNumber?: true
    image?: true
    token?: true
    departmentId?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty: string | null
    phoneNumber: string | null
    image: string | null
    token: string
    departmentId: number
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    specialty?: boolean
    phoneNumber?: boolean
    image?: boolean
    token?: boolean
    departmentId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    professorHas?: boolean | Professor$professorHasArgs<ExtArgs>
    MasterResearch?: boolean | Professor$MasterResearchArgs<ExtArgs>
    ProfessorResearch?: boolean | Professor$ProfessorResearchArgs<ExtArgs>
    GraduationProject?: boolean | Professor$GraduationProjectArgs<ExtArgs>
    ProfessorProject?: boolean | Professor$ProfessorProjectArgs<ExtArgs>
    DepartmentHead?: boolean | Professor$DepartmentHeadArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    specialty?: boolean
    phoneNumber?: boolean
    image?: boolean
    token?: boolean
    departmentId?: boolean
  }

  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    professorHas?: boolean | Professor$professorHasArgs<ExtArgs>
    MasterResearch?: boolean | Professor$MasterResearchArgs<ExtArgs>
    ProfessorResearch?: boolean | Professor$ProfessorResearchArgs<ExtArgs>
    GraduationProject?: boolean | Professor$GraduationProjectArgs<ExtArgs>
    ProfessorProject?: boolean | Professor$ProfessorProjectArgs<ExtArgs>
    DepartmentHead?: boolean | Professor$DepartmentHeadArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      professorHas: Prisma.$Professor_attachmentPayload<ExtArgs> | null
      MasterResearch: Prisma.$ResearchPayload<ExtArgs>[]
      ProfessorResearch: Prisma.$ResearchPayload<ExtArgs>[]
      GraduationProject: Prisma.$ProjectPayload<ExtArgs>[]
      ProfessorProject: Prisma.$ProjectPayload<ExtArgs>[]
      DepartmentHead: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      password: string
      specialty: string | null
      phoneNumber: string | null
      image: string | null
      token: string
      departmentId: number
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }


  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Professor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfessorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
    **/
    create<T extends ProfessorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Professors.
     *     @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     *     @example
     *     // Create many Professors
     *     const professor = await prisma.professor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
    **/
    delete<T extends ProfessorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    professorHas<T extends Professor$professorHasArgs<ExtArgs> = {}>(args?: Subset<T, Professor$professorHasArgs<ExtArgs>>): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    MasterResearch<T extends Professor$MasterResearchArgs<ExtArgs> = {}>(args?: Subset<T, Professor$MasterResearchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findMany'> | Null>;

    ProfessorResearch<T extends Professor$ProfessorResearchArgs<ExtArgs> = {}>(args?: Subset<T, Professor$ProfessorResearchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findMany'> | Null>;

    GraduationProject<T extends Professor$GraduationProjectArgs<ExtArgs> = {}>(args?: Subset<T, Professor$GraduationProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    ProfessorProject<T extends Professor$ProfessorProjectArgs<ExtArgs> = {}>(args?: Subset<T, Professor$ProfessorProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    DepartmentHead<T extends Professor$DepartmentHeadArgs<ExtArgs> = {}>(args?: Subset<T, Professor$DepartmentHeadArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Professor model
   */ 
  interface ProfessorFieldRefs {
    readonly id: FieldRef<"Professor", 'Int'>
    readonly firstName: FieldRef<"Professor", 'String'>
    readonly lastName: FieldRef<"Professor", 'String'>
    readonly email: FieldRef<"Professor", 'String'>
    readonly password: FieldRef<"Professor", 'String'>
    readonly specialty: FieldRef<"Professor", 'String'>
    readonly phoneNumber: FieldRef<"Professor", 'String'>
    readonly image: FieldRef<"Professor", 'String'>
    readonly token: FieldRef<"Professor", 'String'>
    readonly departmentId: FieldRef<"Professor", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }


  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }


  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor.professorHas
   */
  export type Professor$professorHasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    where?: Professor_attachmentWhereInput
  }


  /**
   * Professor.MasterResearch
   */
  export type Professor$MasterResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    cursor?: ResearchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }


  /**
   * Professor.ProfessorResearch
   */
  export type Professor$ProfessorResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    cursor?: ResearchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }


  /**
   * Professor.GraduationProject
   */
  export type Professor$GraduationProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Professor.ProfessorProject
   */
  export type Professor$ProfessorProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Professor.DepartmentHead
   */
  export type Professor$DepartmentHeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }


  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
  }



  /**
   * Model Professor_attachment
   */

  export type AggregateProfessor_attachment = {
    _count: Professor_attachmentCountAggregateOutputType | null
    _avg: Professor_attachmentAvgAggregateOutputType | null
    _sum: Professor_attachmentSumAggregateOutputType | null
    _min: Professor_attachmentMinAggregateOutputType | null
    _max: Professor_attachmentMaxAggregateOutputType | null
  }

  export type Professor_attachmentAvgAggregateOutputType = {
    id: number | null
    ssn: number | null
    degreeId: number | null
    professorId: number | null
  }

  export type Professor_attachmentSumAggregateOutputType = {
    id: number | null
    ssn: number | null
    degreeId: number | null
    professorId: number | null
  }

  export type Professor_attachmentMinAggregateOutputType = {
    id: number | null
    ssn: number | null
    gender: string | null
    degreeDate: Date | null
    degreeId: number | null
    professorId: number | null
  }

  export type Professor_attachmentMaxAggregateOutputType = {
    id: number | null
    ssn: number | null
    gender: string | null
    degreeDate: Date | null
    degreeId: number | null
    professorId: number | null
  }

  export type Professor_attachmentCountAggregateOutputType = {
    id: number
    ssn: number
    gender: number
    degreeDate: number
    degreeId: number
    professorId: number
    _all: number
  }


  export type Professor_attachmentAvgAggregateInputType = {
    id?: true
    ssn?: true
    degreeId?: true
    professorId?: true
  }

  export type Professor_attachmentSumAggregateInputType = {
    id?: true
    ssn?: true
    degreeId?: true
    professorId?: true
  }

  export type Professor_attachmentMinAggregateInputType = {
    id?: true
    ssn?: true
    gender?: true
    degreeDate?: true
    degreeId?: true
    professorId?: true
  }

  export type Professor_attachmentMaxAggregateInputType = {
    id?: true
    ssn?: true
    gender?: true
    degreeDate?: true
    degreeId?: true
    professorId?: true
  }

  export type Professor_attachmentCountAggregateInputType = {
    id?: true
    ssn?: true
    gender?: true
    degreeDate?: true
    degreeId?: true
    professorId?: true
    _all?: true
  }

  export type Professor_attachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor_attachment to aggregate.
     */
    where?: Professor_attachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_attachments to fetch.
     */
    orderBy?: Professor_attachmentOrderByWithRelationInput | Professor_attachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Professor_attachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professor_attachments
    **/
    _count?: true | Professor_attachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Professor_attachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Professor_attachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Professor_attachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Professor_attachmentMaxAggregateInputType
  }

  export type GetProfessor_attachmentAggregateType<T extends Professor_attachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor_attachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor_attachment[P]>
      : GetScalarType<T[P], AggregateProfessor_attachment[P]>
  }




  export type Professor_attachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Professor_attachmentWhereInput
    orderBy?: Professor_attachmentOrderByWithAggregationInput | Professor_attachmentOrderByWithAggregationInput[]
    by: Professor_attachmentScalarFieldEnum[] | Professor_attachmentScalarFieldEnum
    having?: Professor_attachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Professor_attachmentCountAggregateInputType | true
    _avg?: Professor_attachmentAvgAggregateInputType
    _sum?: Professor_attachmentSumAggregateInputType
    _min?: Professor_attachmentMinAggregateInputType
    _max?: Professor_attachmentMaxAggregateInputType
  }

  export type Professor_attachmentGroupByOutputType = {
    id: number
    ssn: number
    gender: string
    degreeDate: Date
    degreeId: number
    professorId: number
    _count: Professor_attachmentCountAggregateOutputType | null
    _avg: Professor_attachmentAvgAggregateOutputType | null
    _sum: Professor_attachmentSumAggregateOutputType | null
    _min: Professor_attachmentMinAggregateOutputType | null
    _max: Professor_attachmentMaxAggregateOutputType | null
  }

  type GetProfessor_attachmentGroupByPayload<T extends Professor_attachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Professor_attachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Professor_attachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Professor_attachmentGroupByOutputType[P]>
            : GetScalarType<T[P], Professor_attachmentGroupByOutputType[P]>
        }
      >
    >


  export type Professor_attachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ssn?: boolean
    gender?: boolean
    degreeDate?: boolean
    degreeId?: boolean
    professorId?: boolean
    degree?: boolean | DegreeDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor_attachment"]>

  export type Professor_attachmentSelectScalar = {
    id?: boolean
    ssn?: boolean
    gender?: boolean
    degreeDate?: boolean
    degreeId?: boolean
    professorId?: boolean
  }

  export type Professor_attachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    degree?: boolean | DegreeDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }


  export type $Professor_attachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor_attachment"
    objects: {
      degree: Prisma.$DegreePayload<ExtArgs>
      professor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ssn: number
      gender: string
      degreeDate: Date
      degreeId: number
      professorId: number
    }, ExtArgs["result"]["professor_attachment"]>
    composites: {}
  }


  type Professor_attachmentGetPayload<S extends boolean | null | undefined | Professor_attachmentDefaultArgs> = $Result.GetResult<Prisma.$Professor_attachmentPayload, S>

  type Professor_attachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Professor_attachmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Professor_attachmentCountAggregateInputType | true
    }

  export interface Professor_attachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor_attachment'], meta: { name: 'Professor_attachment' } }
    /**
     * Find zero or one Professor_attachment that matches the filter.
     * @param {Professor_attachmentFindUniqueArgs} args - Arguments to find a Professor_attachment
     * @example
     * // Get one Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Professor_attachmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentFindUniqueArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Professor_attachment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Professor_attachmentFindUniqueOrThrowArgs} args - Arguments to find a Professor_attachment
     * @example
     * // Get one Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Professor_attachmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Professor_attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentFindFirstArgs} args - Arguments to find a Professor_attachment
     * @example
     * // Get one Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Professor_attachmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentFindFirstArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Professor_attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentFindFirstOrThrowArgs} args - Arguments to find a Professor_attachment
     * @example
     * // Get one Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Professor_attachmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Professor_attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professor_attachments
     * const professor_attachments = await prisma.professor_attachment.findMany()
     * 
     * // Get first 10 Professor_attachments
     * const professor_attachments = await prisma.professor_attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professor_attachmentWithIdOnly = await prisma.professor_attachment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Professor_attachmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Professor_attachment.
     * @param {Professor_attachmentCreateArgs} args - Arguments to create a Professor_attachment.
     * @example
     * // Create one Professor_attachment
     * const Professor_attachment = await prisma.professor_attachment.create({
     *   data: {
     *     // ... data to create a Professor_attachment
     *   }
     * })
     * 
    **/
    create<T extends Professor_attachmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentCreateArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Professor_attachments.
     *     @param {Professor_attachmentCreateManyArgs} args - Arguments to create many Professor_attachments.
     *     @example
     *     // Create many Professor_attachments
     *     const professor_attachment = await prisma.professor_attachment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Professor_attachmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor_attachment.
     * @param {Professor_attachmentDeleteArgs} args - Arguments to delete one Professor_attachment.
     * @example
     * // Delete one Professor_attachment
     * const Professor_attachment = await prisma.professor_attachment.delete({
     *   where: {
     *     // ... filter to delete one Professor_attachment
     *   }
     * })
     * 
    **/
    delete<T extends Professor_attachmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentDeleteArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Professor_attachment.
     * @param {Professor_attachmentUpdateArgs} args - Arguments to update one Professor_attachment.
     * @example
     * // Update one Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Professor_attachmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentUpdateArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Professor_attachments.
     * @param {Professor_attachmentDeleteManyArgs} args - Arguments to filter Professor_attachments to delete.
     * @example
     * // Delete a few Professor_attachments
     * const { count } = await prisma.professor_attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Professor_attachmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_attachmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professor_attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professor_attachments
     * const professor_attachment = await prisma.professor_attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Professor_attachmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor_attachment.
     * @param {Professor_attachmentUpsertArgs} args - Arguments to update or create a Professor_attachment.
     * @example
     * // Update or create a Professor_attachment
     * const professor_attachment = await prisma.professor_attachment.upsert({
     *   create: {
     *     // ... data to create a Professor_attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor_attachment we want to update
     *   }
     * })
    **/
    upsert<T extends Professor_attachmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_attachmentUpsertArgs<ExtArgs>>
    ): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Professor_attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentCountArgs} args - Arguments to filter Professor_attachments to count.
     * @example
     * // Count the number of Professor_attachments
     * const count = await prisma.professor_attachment.count({
     *   where: {
     *     // ... the filter for the Professor_attachments we want to count
     *   }
     * })
    **/
    count<T extends Professor_attachmentCountArgs>(
      args?: Subset<T, Professor_attachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Professor_attachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor_attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Professor_attachmentAggregateArgs>(args: Subset<T, Professor_attachmentAggregateArgs>): Prisma.PrismaPromise<GetProfessor_attachmentAggregateType<T>>

    /**
     * Group by Professor_attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_attachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Professor_attachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Professor_attachmentGroupByArgs['orderBy'] }
        : { orderBy?: Professor_attachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Professor_attachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessor_attachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor_attachment model
   */
  readonly fields: Professor_attachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor_attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Professor_attachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    degree<T extends DegreeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DegreeDefaultArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Professor_attachment model
   */ 
  interface Professor_attachmentFieldRefs {
    readonly id: FieldRef<"Professor_attachment", 'Int'>
    readonly ssn: FieldRef<"Professor_attachment", 'Int'>
    readonly gender: FieldRef<"Professor_attachment", 'String'>
    readonly degreeDate: FieldRef<"Professor_attachment", 'DateTime'>
    readonly degreeId: FieldRef<"Professor_attachment", 'Int'>
    readonly professorId: FieldRef<"Professor_attachment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Professor_attachment findUnique
   */
  export type Professor_attachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter, which Professor_attachment to fetch.
     */
    where: Professor_attachmentWhereUniqueInput
  }


  /**
   * Professor_attachment findUniqueOrThrow
   */
  export type Professor_attachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter, which Professor_attachment to fetch.
     */
    where: Professor_attachmentWhereUniqueInput
  }


  /**
   * Professor_attachment findFirst
   */
  export type Professor_attachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter, which Professor_attachment to fetch.
     */
    where?: Professor_attachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_attachments to fetch.
     */
    orderBy?: Professor_attachmentOrderByWithRelationInput | Professor_attachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professor_attachments.
     */
    cursor?: Professor_attachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professor_attachments.
     */
    distinct?: Professor_attachmentScalarFieldEnum | Professor_attachmentScalarFieldEnum[]
  }


  /**
   * Professor_attachment findFirstOrThrow
   */
  export type Professor_attachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter, which Professor_attachment to fetch.
     */
    where?: Professor_attachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_attachments to fetch.
     */
    orderBy?: Professor_attachmentOrderByWithRelationInput | Professor_attachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professor_attachments.
     */
    cursor?: Professor_attachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professor_attachments.
     */
    distinct?: Professor_attachmentScalarFieldEnum | Professor_attachmentScalarFieldEnum[]
  }


  /**
   * Professor_attachment findMany
   */
  export type Professor_attachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter, which Professor_attachments to fetch.
     */
    where?: Professor_attachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_attachments to fetch.
     */
    orderBy?: Professor_attachmentOrderByWithRelationInput | Professor_attachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professor_attachments.
     */
    cursor?: Professor_attachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_attachments.
     */
    skip?: number
    distinct?: Professor_attachmentScalarFieldEnum | Professor_attachmentScalarFieldEnum[]
  }


  /**
   * Professor_attachment create
   */
  export type Professor_attachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor_attachment.
     */
    data: XOR<Professor_attachmentCreateInput, Professor_attachmentUncheckedCreateInput>
  }


  /**
   * Professor_attachment createMany
   */
  export type Professor_attachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professor_attachments.
     */
    data: Professor_attachmentCreateManyInput | Professor_attachmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Professor_attachment update
   */
  export type Professor_attachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor_attachment.
     */
    data: XOR<Professor_attachmentUpdateInput, Professor_attachmentUncheckedUpdateInput>
    /**
     * Choose, which Professor_attachment to update.
     */
    where: Professor_attachmentWhereUniqueInput
  }


  /**
   * Professor_attachment updateMany
   */
  export type Professor_attachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professor_attachments.
     */
    data: XOR<Professor_attachmentUpdateManyMutationInput, Professor_attachmentUncheckedUpdateManyInput>
    /**
     * Filter which Professor_attachments to update
     */
    where?: Professor_attachmentWhereInput
  }


  /**
   * Professor_attachment upsert
   */
  export type Professor_attachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor_attachment to update in case it exists.
     */
    where: Professor_attachmentWhereUniqueInput
    /**
     * In case the Professor_attachment found by the `where` argument doesn't exist, create a new Professor_attachment with this data.
     */
    create: XOR<Professor_attachmentCreateInput, Professor_attachmentUncheckedCreateInput>
    /**
     * In case the Professor_attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Professor_attachmentUpdateInput, Professor_attachmentUncheckedUpdateInput>
  }


  /**
   * Professor_attachment delete
   */
  export type Professor_attachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    /**
     * Filter which Professor_attachment to delete.
     */
    where: Professor_attachmentWhereUniqueInput
  }


  /**
   * Professor_attachment deleteMany
   */
  export type Professor_attachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor_attachments to delete
     */
    where?: Professor_attachmentWhereInput
  }


  /**
   * Professor_attachment without action
   */
  export type Professor_attachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
  }



  /**
   * Model Degree
   */

  export type AggregateDegree = {
    _count: DegreeCountAggregateOutputType | null
    _avg: DegreeAvgAggregateOutputType | null
    _sum: DegreeSumAggregateOutputType | null
    _min: DegreeMinAggregateOutputType | null
    _max: DegreeMaxAggregateOutputType | null
  }

  export type DegreeAvgAggregateOutputType = {
    id: number | null
  }

  export type DegreeSumAggregateOutputType = {
    id: number | null
  }

  export type DegreeMinAggregateOutputType = {
    id: number | null
    name: string | null
    university: string | null
  }

  export type DegreeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    university: string | null
  }

  export type DegreeCountAggregateOutputType = {
    id: number
    name: number
    university: number
    _all: number
  }


  export type DegreeAvgAggregateInputType = {
    id?: true
  }

  export type DegreeSumAggregateInputType = {
    id?: true
  }

  export type DegreeMinAggregateInputType = {
    id?: true
    name?: true
    university?: true
  }

  export type DegreeMaxAggregateInputType = {
    id?: true
    name?: true
    university?: true
  }

  export type DegreeCountAggregateInputType = {
    id?: true
    name?: true
    university?: true
    _all?: true
  }

  export type DegreeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Degree to aggregate.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Degrees
    **/
    _count?: true | DegreeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DegreeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DegreeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DegreeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DegreeMaxAggregateInputType
  }

  export type GetDegreeAggregateType<T extends DegreeAggregateArgs> = {
        [P in keyof T & keyof AggregateDegree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDegree[P]>
      : GetScalarType<T[P], AggregateDegree[P]>
  }




  export type DegreeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DegreeWhereInput
    orderBy?: DegreeOrderByWithAggregationInput | DegreeOrderByWithAggregationInput[]
    by: DegreeScalarFieldEnum[] | DegreeScalarFieldEnum
    having?: DegreeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DegreeCountAggregateInputType | true
    _avg?: DegreeAvgAggregateInputType
    _sum?: DegreeSumAggregateInputType
    _min?: DegreeMinAggregateInputType
    _max?: DegreeMaxAggregateInputType
  }

  export type DegreeGroupByOutputType = {
    id: number
    name: string
    university: string
    _count: DegreeCountAggregateOutputType | null
    _avg: DegreeAvgAggregateOutputType | null
    _sum: DegreeSumAggregateOutputType | null
    _min: DegreeMinAggregateOutputType | null
    _max: DegreeMaxAggregateOutputType | null
  }

  type GetDegreeGroupByPayload<T extends DegreeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DegreeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DegreeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DegreeGroupByOutputType[P]>
            : GetScalarType<T[P], DegreeGroupByOutputType[P]>
        }
      >
    >


  export type DegreeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    university?: boolean
    ProfessorDegree?: boolean | Degree$ProfessorDegreeArgs<ExtArgs>
  }, ExtArgs["result"]["degree"]>

  export type DegreeSelectScalar = {
    id?: boolean
    name?: boolean
    university?: boolean
  }

  export type DegreeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProfessorDegree?: boolean | Degree$ProfessorDegreeArgs<ExtArgs>
  }


  export type $DegreePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Degree"
    objects: {
      ProfessorDegree: Prisma.$Professor_attachmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      university: string
    }, ExtArgs["result"]["degree"]>
    composites: {}
  }


  type DegreeGetPayload<S extends boolean | null | undefined | DegreeDefaultArgs> = $Result.GetResult<Prisma.$DegreePayload, S>

  type DegreeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DegreeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DegreeCountAggregateInputType | true
    }

  export interface DegreeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Degree'], meta: { name: 'Degree' } }
    /**
     * Find zero or one Degree that matches the filter.
     * @param {DegreeFindUniqueArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DegreeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeFindUniqueArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Degree that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DegreeFindUniqueOrThrowArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DegreeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Degree that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindFirstArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DegreeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeFindFirstArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Degree that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindFirstOrThrowArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DegreeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Degrees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Degrees
     * const degrees = await prisma.degree.findMany()
     * 
     * // Get first 10 Degrees
     * const degrees = await prisma.degree.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const degreeWithIdOnly = await prisma.degree.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DegreeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Degree.
     * @param {DegreeCreateArgs} args - Arguments to create a Degree.
     * @example
     * // Create one Degree
     * const Degree = await prisma.degree.create({
     *   data: {
     *     // ... data to create a Degree
     *   }
     * })
     * 
    **/
    create<T extends DegreeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeCreateArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Degrees.
     *     @param {DegreeCreateManyArgs} args - Arguments to create many Degrees.
     *     @example
     *     // Create many Degrees
     *     const degree = await prisma.degree.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DegreeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Degree.
     * @param {DegreeDeleteArgs} args - Arguments to delete one Degree.
     * @example
     * // Delete one Degree
     * const Degree = await prisma.degree.delete({
     *   where: {
     *     // ... filter to delete one Degree
     *   }
     * })
     * 
    **/
    delete<T extends DegreeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeDeleteArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Degree.
     * @param {DegreeUpdateArgs} args - Arguments to update one Degree.
     * @example
     * // Update one Degree
     * const degree = await prisma.degree.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DegreeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeUpdateArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Degrees.
     * @param {DegreeDeleteManyArgs} args - Arguments to filter Degrees to delete.
     * @example
     * // Delete a few Degrees
     * const { count } = await prisma.degree.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DegreeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DegreeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Degrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Degrees
     * const degree = await prisma.degree.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DegreeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Degree.
     * @param {DegreeUpsertArgs} args - Arguments to update or create a Degree.
     * @example
     * // Update or create a Degree
     * const degree = await prisma.degree.upsert({
     *   create: {
     *     // ... data to create a Degree
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Degree we want to update
     *   }
     * })
    **/
    upsert<T extends DegreeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DegreeUpsertArgs<ExtArgs>>
    ): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Degrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeCountArgs} args - Arguments to filter Degrees to count.
     * @example
     * // Count the number of Degrees
     * const count = await prisma.degree.count({
     *   where: {
     *     // ... the filter for the Degrees we want to count
     *   }
     * })
    **/
    count<T extends DegreeCountArgs>(
      args?: Subset<T, DegreeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DegreeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Degree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DegreeAggregateArgs>(args: Subset<T, DegreeAggregateArgs>): Prisma.PrismaPromise<GetDegreeAggregateType<T>>

    /**
     * Group by Degree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DegreeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DegreeGroupByArgs['orderBy'] }
        : { orderBy?: DegreeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DegreeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDegreeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Degree model
   */
  readonly fields: DegreeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Degree.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DegreeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ProfessorDegree<T extends Degree$ProfessorDegreeArgs<ExtArgs> = {}>(args?: Subset<T, Degree$ProfessorDegreeArgs<ExtArgs>>): Prisma__Professor_attachmentClient<$Result.GetResult<Prisma.$Professor_attachmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Degree model
   */ 
  interface DegreeFieldRefs {
    readonly id: FieldRef<"Degree", 'Int'>
    readonly name: FieldRef<"Degree", 'String'>
    readonly university: FieldRef<"Degree", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Degree findUnique
   */
  export type DegreeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where: DegreeWhereUniqueInput
  }


  /**
   * Degree findUniqueOrThrow
   */
  export type DegreeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where: DegreeWhereUniqueInput
  }


  /**
   * Degree findFirst
   */
  export type DegreeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Degrees.
     */
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }


  /**
   * Degree findFirstOrThrow
   */
  export type DegreeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Degrees.
     */
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }


  /**
   * Degree findMany
   */
  export type DegreeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degrees to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }


  /**
   * Degree create
   */
  export type DegreeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The data needed to create a Degree.
     */
    data: XOR<DegreeCreateInput, DegreeUncheckedCreateInput>
  }


  /**
   * Degree createMany
   */
  export type DegreeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Degrees.
     */
    data: DegreeCreateManyInput | DegreeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Degree update
   */
  export type DegreeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The data needed to update a Degree.
     */
    data: XOR<DegreeUpdateInput, DegreeUncheckedUpdateInput>
    /**
     * Choose, which Degree to update.
     */
    where: DegreeWhereUniqueInput
  }


  /**
   * Degree updateMany
   */
  export type DegreeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Degrees.
     */
    data: XOR<DegreeUpdateManyMutationInput, DegreeUncheckedUpdateManyInput>
    /**
     * Filter which Degrees to update
     */
    where?: DegreeWhereInput
  }


  /**
   * Degree upsert
   */
  export type DegreeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The filter to search for the Degree to update in case it exists.
     */
    where: DegreeWhereUniqueInput
    /**
     * In case the Degree found by the `where` argument doesn't exist, create a new Degree with this data.
     */
    create: XOR<DegreeCreateInput, DegreeUncheckedCreateInput>
    /**
     * In case the Degree was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DegreeUpdateInput, DegreeUncheckedUpdateInput>
  }


  /**
   * Degree delete
   */
  export type DegreeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter which Degree to delete.
     */
    where: DegreeWhereUniqueInput
  }


  /**
   * Degree deleteMany
   */
  export type DegreeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Degrees to delete
     */
    where?: DegreeWhereInput
  }


  /**
   * Degree.ProfessorDegree
   */
  export type Degree$ProfessorDegreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_attachment
     */
    select?: Professor_attachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_attachmentInclude<ExtArgs> | null
    where?: Professor_attachmentWhereInput
  }


  /**
   * Degree without action
   */
  export type DegreeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DegreeInclude<ExtArgs> | null
  }



  /**
   * Model Research
   */

  export type AggregateResearch = {
    _count: ResearchCountAggregateOutputType | null
    _avg: ResearchAvgAggregateOutputType | null
    _sum: ResearchSumAggregateOutputType | null
    _min: ResearchMinAggregateOutputType | null
    _max: ResearchMaxAggregateOutputType | null
  }

  export type ResearchAvgAggregateOutputType = {
    id: number | null
    pagesNumper: number | null
    publishYear: number | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ResearchSumAggregateOutputType = {
    id: number | null
    pagesNumper: number | null
    publishYear: number | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ResearchMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    createdBy: string | null
    pagesNumper: number | null
    publisher: string | null
    magazinName: string | null
    magazinVolume: string | null
    publishYear: number | null
    majoring: string | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ResearchMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    createdBy: string | null
    pagesNumper: number | null
    publisher: string | null
    magazinName: string | null
    magazinVolume: string | null
    publishYear: number | null
    majoring: string | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ResearchCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startDate: number
    endDate: number
    status: number
    createdBy: number
    pagesNumper: number
    publisher: number
    magazinName: number
    magazinVolume: number
    publishYear: number
    majoring: number
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
    _all: number
  }


  export type ResearchAvgAggregateInputType = {
    id?: true
    pagesNumper?: true
    publishYear?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ResearchSumAggregateInputType = {
    id?: true
    pagesNumper?: true
    publishYear?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ResearchMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    pagesNumper?: true
    publisher?: true
    magazinName?: true
    magazinVolume?: true
    publishYear?: true
    majoring?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ResearchMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    pagesNumper?: true
    publisher?: true
    magazinName?: true
    magazinVolume?: true
    publishYear?: true
    majoring?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ResearchCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    pagesNumper?: true
    publisher?: true
    magazinName?: true
    magazinVolume?: true
    publishYear?: true
    majoring?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
    _all?: true
  }

  export type ResearchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Research to aggregate.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Research
    **/
    _count?: true | ResearchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResearchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResearchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResearchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResearchMaxAggregateInputType
  }

  export type GetResearchAggregateType<T extends ResearchAggregateArgs> = {
        [P in keyof T & keyof AggregateResearch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResearch[P]>
      : GetScalarType<T[P], AggregateResearch[P]>
  }




  export type ResearchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchWhereInput
    orderBy?: ResearchOrderByWithAggregationInput | ResearchOrderByWithAggregationInput[]
    by: ResearchScalarFieldEnum[] | ResearchScalarFieldEnum
    having?: ResearchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResearchCountAggregateInputType | true
    _avg?: ResearchAvgAggregateInputType
    _sum?: ResearchSumAggregateInputType
    _min?: ResearchMinAggregateInputType
    _max?: ResearchMaxAggregateInputType
  }

  export type ResearchGroupByOutputType = {
    id: number
    title: string
    description: string
    startDate: Date
    endDate: Date
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
    _count: ResearchCountAggregateOutputType | null
    _avg: ResearchAvgAggregateOutputType | null
    _sum: ResearchSumAggregateOutputType | null
    _min: ResearchMinAggregateOutputType | null
    _max: ResearchMaxAggregateOutputType | null
  }

  type GetResearchGroupByPayload<T extends ResearchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResearchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResearchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResearchGroupByOutputType[P]>
            : GetScalarType<T[P], ResearchGroupByOutputType[P]>
        }
      >
    >


  export type ResearchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdBy?: boolean
    pagesNumper?: boolean
    publisher?: boolean
    magazinName?: boolean
    magazinVolume?: boolean
    publishYear?: boolean
    majoring?: boolean
    typeId?: boolean
    departmentId?: boolean
    professorRoleId?: boolean
    authorId?: boolean
    supervisorId?: boolean
    type?: boolean | TypeDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    ProfessorRole?: boolean | Professor_roleDefaultArgs<ExtArgs>
    author?: boolean | ProfessorDefaultArgs<ExtArgs>
    supervisor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["research"]>

  export type ResearchSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdBy?: boolean
    pagesNumper?: boolean
    publisher?: boolean
    magazinName?: boolean
    magazinVolume?: boolean
    publishYear?: boolean
    majoring?: boolean
    typeId?: boolean
    departmentId?: boolean
    professorRoleId?: boolean
    authorId?: boolean
    supervisorId?: boolean
  }

  export type ResearchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | TypeDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    ProfessorRole?: boolean | Professor_roleDefaultArgs<ExtArgs>
    author?: boolean | ProfessorDefaultArgs<ExtArgs>
    supervisor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }


  export type $ResearchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Research"
    objects: {
      type: Prisma.$TypePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      ProfessorRole: Prisma.$Professor_rolePayload<ExtArgs>
      author: Prisma.$ProfessorPayload<ExtArgs>
      supervisor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      startDate: Date
      endDate: Date
      status: string
      createdBy: string
      pagesNumper: number
      publisher: string
      magazinName: string
      magazinVolume: string
      publishYear: number
      majoring: string
      typeId: number
      departmentId: number
      professorRoleId: number
      authorId: number
      supervisorId: number
    }, ExtArgs["result"]["research"]>
    composites: {}
  }


  type ResearchGetPayload<S extends boolean | null | undefined | ResearchDefaultArgs> = $Result.GetResult<Prisma.$ResearchPayload, S>

  type ResearchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResearchFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ResearchCountAggregateInputType | true
    }

  export interface ResearchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Research'], meta: { name: 'Research' } }
    /**
     * Find zero or one Research that matches the filter.
     * @param {ResearchFindUniqueArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResearchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchFindUniqueArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Research that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResearchFindUniqueOrThrowArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResearchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Research that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindFirstArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResearchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchFindFirstArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Research that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindFirstOrThrowArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResearchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Research that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Research
     * const research = await prisma.research.findMany()
     * 
     * // Get first 10 Research
     * const research = await prisma.research.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const researchWithIdOnly = await prisma.research.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResearchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Research.
     * @param {ResearchCreateArgs} args - Arguments to create a Research.
     * @example
     * // Create one Research
     * const Research = await prisma.research.create({
     *   data: {
     *     // ... data to create a Research
     *   }
     * })
     * 
    **/
    create<T extends ResearchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchCreateArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Research.
     *     @param {ResearchCreateManyArgs} args - Arguments to create many Research.
     *     @example
     *     // Create many Research
     *     const research = await prisma.research.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResearchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Research.
     * @param {ResearchDeleteArgs} args - Arguments to delete one Research.
     * @example
     * // Delete one Research
     * const Research = await prisma.research.delete({
     *   where: {
     *     // ... filter to delete one Research
     *   }
     * })
     * 
    **/
    delete<T extends ResearchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchDeleteArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Research.
     * @param {ResearchUpdateArgs} args - Arguments to update one Research.
     * @example
     * // Update one Research
     * const research = await prisma.research.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResearchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchUpdateArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Research.
     * @param {ResearchDeleteManyArgs} args - Arguments to filter Research to delete.
     * @example
     * // Delete a few Research
     * const { count } = await prisma.research.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResearchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResearchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Research
     * const research = await prisma.research.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResearchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Research.
     * @param {ResearchUpsertArgs} args - Arguments to update or create a Research.
     * @example
     * // Update or create a Research
     * const research = await prisma.research.upsert({
     *   create: {
     *     // ... data to create a Research
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Research we want to update
     *   }
     * })
    **/
    upsert<T extends ResearchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResearchUpsertArgs<ExtArgs>>
    ): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchCountArgs} args - Arguments to filter Research to count.
     * @example
     * // Count the number of Research
     * const count = await prisma.research.count({
     *   where: {
     *     // ... the filter for the Research we want to count
     *   }
     * })
    **/
    count<T extends ResearchCountArgs>(
      args?: Subset<T, ResearchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResearchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResearchAggregateArgs>(args: Subset<T, ResearchAggregateArgs>): Prisma.PrismaPromise<GetResearchAggregateType<T>>

    /**
     * Group by Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResearchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResearchGroupByArgs['orderBy'] }
        : { orderBy?: ResearchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResearchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResearchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Research model
   */
  readonly fields: ResearchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Research.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResearchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    type<T extends TypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypeDefaultArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProfessorRole<T extends Professor_roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Professor_roleDefaultArgs<ExtArgs>>): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    author<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    supervisor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Research model
   */ 
  interface ResearchFieldRefs {
    readonly id: FieldRef<"Research", 'Int'>
    readonly title: FieldRef<"Research", 'String'>
    readonly description: FieldRef<"Research", 'String'>
    readonly startDate: FieldRef<"Research", 'DateTime'>
    readonly endDate: FieldRef<"Research", 'DateTime'>
    readonly status: FieldRef<"Research", 'String'>
    readonly createdBy: FieldRef<"Research", 'String'>
    readonly pagesNumper: FieldRef<"Research", 'Int'>
    readonly publisher: FieldRef<"Research", 'String'>
    readonly magazinName: FieldRef<"Research", 'String'>
    readonly magazinVolume: FieldRef<"Research", 'String'>
    readonly publishYear: FieldRef<"Research", 'Int'>
    readonly majoring: FieldRef<"Research", 'String'>
    readonly typeId: FieldRef<"Research", 'Int'>
    readonly departmentId: FieldRef<"Research", 'Int'>
    readonly professorRoleId: FieldRef<"Research", 'Int'>
    readonly authorId: FieldRef<"Research", 'Int'>
    readonly supervisorId: FieldRef<"Research", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Research findUnique
   */
  export type ResearchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where: ResearchWhereUniqueInput
  }


  /**
   * Research findUniqueOrThrow
   */
  export type ResearchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where: ResearchWhereUniqueInput
  }


  /**
   * Research findFirst
   */
  export type ResearchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Research.
     */
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }


  /**
   * Research findFirstOrThrow
   */
  export type ResearchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Research.
     */
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }


  /**
   * Research findMany
   */
  export type ResearchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }


  /**
   * Research create
   */
  export type ResearchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The data needed to create a Research.
     */
    data: XOR<ResearchCreateInput, ResearchUncheckedCreateInput>
  }


  /**
   * Research createMany
   */
  export type ResearchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Research.
     */
    data: ResearchCreateManyInput | ResearchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Research update
   */
  export type ResearchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The data needed to update a Research.
     */
    data: XOR<ResearchUpdateInput, ResearchUncheckedUpdateInput>
    /**
     * Choose, which Research to update.
     */
    where: ResearchWhereUniqueInput
  }


  /**
   * Research updateMany
   */
  export type ResearchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Research.
     */
    data: XOR<ResearchUpdateManyMutationInput, ResearchUncheckedUpdateManyInput>
    /**
     * Filter which Research to update
     */
    where?: ResearchWhereInput
  }


  /**
   * Research upsert
   */
  export type ResearchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The filter to search for the Research to update in case it exists.
     */
    where: ResearchWhereUniqueInput
    /**
     * In case the Research found by the `where` argument doesn't exist, create a new Research with this data.
     */
    create: XOR<ResearchCreateInput, ResearchUncheckedCreateInput>
    /**
     * In case the Research was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResearchUpdateInput, ResearchUncheckedUpdateInput>
  }


  /**
   * Research delete
   */
  export type ResearchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter which Research to delete.
     */
    where: ResearchWhereUniqueInput
  }


  /**
   * Research deleteMany
   */
  export type ResearchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Research to delete
     */
    where?: ResearchWhereInput
  }


  /**
   * Research without action
   */
  export type ResearchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
  }



  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    projectId: number | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ProjectSumAggregateOutputType = {
    projectId: number | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ProjectMinAggregateOutputType = {
    projectId: number | null
    projectName: string | null
    description: string | null
    topic: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    createdBy: string | null
    affiliate: string | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ProjectMaxAggregateOutputType = {
    projectId: number | null
    projectName: string | null
    description: string | null
    topic: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    createdBy: string | null
    affiliate: string | null
    typeId: number | null
    departmentId: number | null
    professorRoleId: number | null
    authorId: number | null
    supervisorId: number | null
  }

  export type ProjectCountAggregateOutputType = {
    projectId: number
    projectName: number
    description: number
    topic: number
    startDate: number
    endDate: number
    status: number
    createdBy: number
    affiliate: number
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    projectId?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ProjectSumAggregateInputType = {
    projectId?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ProjectMinAggregateInputType = {
    projectId?: true
    projectName?: true
    description?: true
    topic?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    affiliate?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ProjectMaxAggregateInputType = {
    projectId?: true
    projectName?: true
    description?: true
    topic?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    affiliate?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
  }

  export type ProjectCountAggregateInputType = {
    projectId?: true
    projectName?: true
    description?: true
    topic?: true
    startDate?: true
    endDate?: true
    status?: true
    createdBy?: true
    affiliate?: true
    typeId?: true
    departmentId?: true
    professorRoleId?: true
    authorId?: true
    supervisorId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    projectId: number
    projectName: string
    description: string
    topic: string
    startDate: Date
    endDate: Date
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    projectName?: boolean
    description?: boolean
    topic?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdBy?: boolean
    affiliate?: boolean
    typeId?: boolean
    departmentId?: boolean
    professorRoleId?: boolean
    authorId?: boolean
    supervisorId?: boolean
    type?: boolean | TypeDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    ProfessorRole?: boolean | Professor_roleDefaultArgs<ExtArgs>
    author?: boolean | ProfessorDefaultArgs<ExtArgs>
    supervisor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    projectId?: boolean
    projectName?: boolean
    description?: boolean
    topic?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    createdBy?: boolean
    affiliate?: boolean
    typeId?: boolean
    departmentId?: boolean
    professorRoleId?: boolean
    authorId?: boolean
    supervisorId?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | TypeDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    ProfessorRole?: boolean | Professor_roleDefaultArgs<ExtArgs>
    author?: boolean | ProfessorDefaultArgs<ExtArgs>
    supervisor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }


  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      type: Prisma.$TypePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      ProfessorRole: Prisma.$Professor_rolePayload<ExtArgs>
      author: Prisma.$ProfessorPayload<ExtArgs>
      supervisor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      projectId: number
      projectName: string
      description: string
      topic: string
      startDate: Date
      endDate: Date
      status: string
      createdBy: string
      affiliate: string
      typeId: number
      departmentId: number
      professorRoleId: number
      authorId: number
      supervisorId: number
    }, ExtArgs["result"]["project"]>
    composites: {}
  }


  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    type<T extends TypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypeDefaultArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProfessorRole<T extends Professor_roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Professor_roleDefaultArgs<ExtArgs>>): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    author<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    supervisor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly projectId: FieldRef<"Project", 'Int'>
    readonly projectName: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly topic: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly endDate: FieldRef<"Project", 'DateTime'>
    readonly status: FieldRef<"Project", 'String'>
    readonly createdBy: FieldRef<"Project", 'String'>
    readonly affiliate: FieldRef<"Project", 'String'>
    readonly typeId: FieldRef<"Project", 'Int'>
    readonly departmentId: FieldRef<"Project", 'Int'>
    readonly professorRoleId: FieldRef<"Project", 'Int'>
    readonly authorId: FieldRef<"Project", 'Int'>
    readonly supervisorId: FieldRef<"Project", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
  }



  /**
   * Model Type
   */

  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeSumAggregateOutputType = {
    id: number | null
  }

  export type TypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    id?: true
  }

  export type TypeSumAggregateInputType = {
    id?: true
  }

  export type TypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypeWhereInput
    orderBy?: TypeOrderByWithAggregationInput | TypeOrderByWithAggregationInput[]
    by: TypeScalarFieldEnum[] | TypeScalarFieldEnum
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }

  export type TypeGroupByOutputType = {
    id: number
    name: string
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Project?: boolean | Type$ProjectArgs<ExtArgs>
    Research?: boolean | Type$ResearchArgs<ExtArgs>
  }, ExtArgs["result"]["type"]>

  export type TypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | Type$ProjectArgs<ExtArgs>
    Research?: boolean | Type$ResearchArgs<ExtArgs>
  }


  export type $TypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Type"
    objects: {
      Project: Prisma.$ProjectPayload<ExtArgs> | null
      Research: Prisma.$ResearchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["type"]>
    composites: {}
  }


  type TypeGetPayload<S extends boolean | null | undefined | TypeDefaultArgs> = $Result.GetResult<Prisma.$TypePayload, S>

  type TypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Type'], meta: { name: 'Type' } }
    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TypeFindUniqueArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeCreateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Types.
     *     @param {TypeCreateManyArgs} args - Arguments to create many Types.
     *     @example
     *     // Create many Types
     *     const type = await prisma.type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TypeDeleteArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpsertArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Type model
   */
  readonly fields: TypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Project<T extends Type$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Type$ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Research<T extends Type$ResearchArgs<ExtArgs> = {}>(args?: Subset<T, Type$ResearchArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Type model
   */ 
  interface TypeFieldRefs {
    readonly id: FieldRef<"Type", 'Int'>
    readonly name: FieldRef<"Type", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Type findUnique
   */
  export type TypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findFirst
   */
  export type TypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type create
   */
  export type TypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type createMany
   */
  export type TypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Types.
     */
    data: TypeCreateManyInput | TypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.Project
   */
  export type Type$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }


  /**
   * Type.Research
   */
  export type Type$ResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
  }


  /**
   * Type without action
   */
  export type TypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
  }



  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    HeadId: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    HeadId: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    HeadId: number | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    HeadId: number | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    HeadId: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    HeadId?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    HeadId?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    HeadId?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    HeadId?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    HeadId?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: string
    HeadId: number
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    HeadId?: boolean
    head?: boolean | ProfessorDefaultArgs<ExtArgs>
    ProfessorDepartment?: boolean | Department$ProfessorDepartmentArgs<ExtArgs>
    ResearchDepartment?: boolean | Department$ResearchDepartmentArgs<ExtArgs>
    ProjectDepartment?: boolean | Department$ProjectDepartmentArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    HeadId?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | ProfessorDefaultArgs<ExtArgs>
    ProfessorDepartment?: boolean | Department$ProfessorDepartmentArgs<ExtArgs>
    ResearchDepartment?: boolean | Department$ResearchDepartmentArgs<ExtArgs>
    ProjectDepartment?: boolean | Department$ProjectDepartmentArgs<ExtArgs>
  }


  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      head: Prisma.$ProfessorPayload<ExtArgs>
      ProfessorDepartment: Prisma.$ProfessorPayload<ExtArgs> | null
      ResearchDepartment: Prisma.$ResearchPayload<ExtArgs> | null
      ProjectDepartment: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      HeadId: number
    }, ExtArgs["result"]["department"]>
    composites: {}
  }


  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Departments.
     *     @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     *     @example
     *     // Create many Departments
     *     const department = await prisma.department.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DepartmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    head<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProfessorDepartment<T extends Department$ProfessorDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Department$ProfessorDepartmentArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ResearchDepartment<T extends Department$ResearchDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Department$ResearchDepartmentArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ProjectDepartment<T extends Department$ProjectDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Department$ProjectDepartmentArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly HeadId: FieldRef<"Department", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department.ProfessorDepartment
   */
  export type Department$ProfessorDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
  }


  /**
   * Department.ResearchDepartment
   */
  export type Department$ResearchDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
  }


  /**
   * Department.ProjectDepartment
   */
  export type Department$ProjectDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }


  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
  }



  /**
   * Model Professor_role
   */

  export type AggregateProfessor_role = {
    _count: Professor_roleCountAggregateOutputType | null
    _avg: Professor_roleAvgAggregateOutputType | null
    _sum: Professor_roleSumAggregateOutputType | null
    _min: Professor_roleMinAggregateOutputType | null
    _max: Professor_roleMaxAggregateOutputType | null
  }

  export type Professor_roleAvgAggregateOutputType = {
    id: number | null
  }

  export type Professor_roleSumAggregateOutputType = {
    id: number | null
  }

  export type Professor_roleMinAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type Professor_roleMaxAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type Professor_roleCountAggregateOutputType = {
    id: number
    role: number
    _all: number
  }


  export type Professor_roleAvgAggregateInputType = {
    id?: true
  }

  export type Professor_roleSumAggregateInputType = {
    id?: true
  }

  export type Professor_roleMinAggregateInputType = {
    id?: true
    role?: true
  }

  export type Professor_roleMaxAggregateInputType = {
    id?: true
    role?: true
  }

  export type Professor_roleCountAggregateInputType = {
    id?: true
    role?: true
    _all?: true
  }

  export type Professor_roleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor_role to aggregate.
     */
    where?: Professor_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_roles to fetch.
     */
    orderBy?: Professor_roleOrderByWithRelationInput | Professor_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Professor_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professor_roles
    **/
    _count?: true | Professor_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Professor_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Professor_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Professor_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Professor_roleMaxAggregateInputType
  }

  export type GetProfessor_roleAggregateType<T extends Professor_roleAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor_role]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor_role[P]>
      : GetScalarType<T[P], AggregateProfessor_role[P]>
  }




  export type Professor_roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Professor_roleWhereInput
    orderBy?: Professor_roleOrderByWithAggregationInput | Professor_roleOrderByWithAggregationInput[]
    by: Professor_roleScalarFieldEnum[] | Professor_roleScalarFieldEnum
    having?: Professor_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Professor_roleCountAggregateInputType | true
    _avg?: Professor_roleAvgAggregateInputType
    _sum?: Professor_roleSumAggregateInputType
    _min?: Professor_roleMinAggregateInputType
    _max?: Professor_roleMaxAggregateInputType
  }

  export type Professor_roleGroupByOutputType = {
    id: number
    role: string
    _count: Professor_roleCountAggregateOutputType | null
    _avg: Professor_roleAvgAggregateOutputType | null
    _sum: Professor_roleSumAggregateOutputType | null
    _min: Professor_roleMinAggregateOutputType | null
    _max: Professor_roleMaxAggregateOutputType | null
  }

  type GetProfessor_roleGroupByPayload<T extends Professor_roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Professor_roleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Professor_roleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Professor_roleGroupByOutputType[P]>
            : GetScalarType<T[P], Professor_roleGroupByOutputType[P]>
        }
      >
    >


  export type Professor_roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    Project?: boolean | Professor_role$ProjectArgs<ExtArgs>
    Research?: boolean | Professor_role$ResearchArgs<ExtArgs>
  }, ExtArgs["result"]["professor_role"]>

  export type Professor_roleSelectScalar = {
    id?: boolean
    role?: boolean
  }

  export type Professor_roleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | Professor_role$ProjectArgs<ExtArgs>
    Research?: boolean | Professor_role$ResearchArgs<ExtArgs>
  }


  export type $Professor_rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor_role"
    objects: {
      Project: Prisma.$ProjectPayload<ExtArgs> | null
      Research: Prisma.$ResearchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: string
    }, ExtArgs["result"]["professor_role"]>
    composites: {}
  }


  type Professor_roleGetPayload<S extends boolean | null | undefined | Professor_roleDefaultArgs> = $Result.GetResult<Prisma.$Professor_rolePayload, S>

  type Professor_roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Professor_roleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Professor_roleCountAggregateInputType | true
    }

  export interface Professor_roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor_role'], meta: { name: 'Professor_role' } }
    /**
     * Find zero or one Professor_role that matches the filter.
     * @param {Professor_roleFindUniqueArgs} args - Arguments to find a Professor_role
     * @example
     * // Get one Professor_role
     * const professor_role = await prisma.professor_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Professor_roleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleFindUniqueArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Professor_role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Professor_roleFindUniqueOrThrowArgs} args - Arguments to find a Professor_role
     * @example
     * // Get one Professor_role
     * const professor_role = await prisma.professor_role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Professor_roleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Professor_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleFindFirstArgs} args - Arguments to find a Professor_role
     * @example
     * // Get one Professor_role
     * const professor_role = await prisma.professor_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Professor_roleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleFindFirstArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Professor_role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleFindFirstOrThrowArgs} args - Arguments to find a Professor_role
     * @example
     * // Get one Professor_role
     * const professor_role = await prisma.professor_role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Professor_roleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Professor_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professor_roles
     * const professor_roles = await prisma.professor_role.findMany()
     * 
     * // Get first 10 Professor_roles
     * const professor_roles = await prisma.professor_role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professor_roleWithIdOnly = await prisma.professor_role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Professor_roleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Professor_role.
     * @param {Professor_roleCreateArgs} args - Arguments to create a Professor_role.
     * @example
     * // Create one Professor_role
     * const Professor_role = await prisma.professor_role.create({
     *   data: {
     *     // ... data to create a Professor_role
     *   }
     * })
     * 
    **/
    create<T extends Professor_roleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleCreateArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Professor_roles.
     *     @param {Professor_roleCreateManyArgs} args - Arguments to create many Professor_roles.
     *     @example
     *     // Create many Professor_roles
     *     const professor_role = await prisma.professor_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Professor_roleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor_role.
     * @param {Professor_roleDeleteArgs} args - Arguments to delete one Professor_role.
     * @example
     * // Delete one Professor_role
     * const Professor_role = await prisma.professor_role.delete({
     *   where: {
     *     // ... filter to delete one Professor_role
     *   }
     * })
     * 
    **/
    delete<T extends Professor_roleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleDeleteArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Professor_role.
     * @param {Professor_roleUpdateArgs} args - Arguments to update one Professor_role.
     * @example
     * // Update one Professor_role
     * const professor_role = await prisma.professor_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Professor_roleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleUpdateArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Professor_roles.
     * @param {Professor_roleDeleteManyArgs} args - Arguments to filter Professor_roles to delete.
     * @example
     * // Delete a few Professor_roles
     * const { count } = await prisma.professor_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Professor_roleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Professor_roleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professor_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professor_roles
     * const professor_role = await prisma.professor_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Professor_roleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor_role.
     * @param {Professor_roleUpsertArgs} args - Arguments to update or create a Professor_role.
     * @example
     * // Update or create a Professor_role
     * const professor_role = await prisma.professor_role.upsert({
     *   create: {
     *     // ... data to create a Professor_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor_role we want to update
     *   }
     * })
    **/
    upsert<T extends Professor_roleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Professor_roleUpsertArgs<ExtArgs>>
    ): Prisma__Professor_roleClient<$Result.GetResult<Prisma.$Professor_rolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Professor_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleCountArgs} args - Arguments to filter Professor_roles to count.
     * @example
     * // Count the number of Professor_roles
     * const count = await prisma.professor_role.count({
     *   where: {
     *     // ... the filter for the Professor_roles we want to count
     *   }
     * })
    **/
    count<T extends Professor_roleCountArgs>(
      args?: Subset<T, Professor_roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Professor_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Professor_roleAggregateArgs>(args: Subset<T, Professor_roleAggregateArgs>): Prisma.PrismaPromise<GetProfessor_roleAggregateType<T>>

    /**
     * Group by Professor_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Professor_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Professor_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Professor_roleGroupByArgs['orderBy'] }
        : { orderBy?: Professor_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Professor_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessor_roleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor_role model
   */
  readonly fields: Professor_roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Professor_roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Project<T extends Professor_role$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Professor_role$ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Research<T extends Professor_role$ResearchArgs<ExtArgs> = {}>(args?: Subset<T, Professor_role$ResearchArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Professor_role model
   */ 
  interface Professor_roleFieldRefs {
    readonly id: FieldRef<"Professor_role", 'Int'>
    readonly role: FieldRef<"Professor_role", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Professor_role findUnique
   */
  export type Professor_roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter, which Professor_role to fetch.
     */
    where: Professor_roleWhereUniqueInput
  }


  /**
   * Professor_role findUniqueOrThrow
   */
  export type Professor_roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter, which Professor_role to fetch.
     */
    where: Professor_roleWhereUniqueInput
  }


  /**
   * Professor_role findFirst
   */
  export type Professor_roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter, which Professor_role to fetch.
     */
    where?: Professor_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_roles to fetch.
     */
    orderBy?: Professor_roleOrderByWithRelationInput | Professor_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professor_roles.
     */
    cursor?: Professor_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professor_roles.
     */
    distinct?: Professor_roleScalarFieldEnum | Professor_roleScalarFieldEnum[]
  }


  /**
   * Professor_role findFirstOrThrow
   */
  export type Professor_roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter, which Professor_role to fetch.
     */
    where?: Professor_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_roles to fetch.
     */
    orderBy?: Professor_roleOrderByWithRelationInput | Professor_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professor_roles.
     */
    cursor?: Professor_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professor_roles.
     */
    distinct?: Professor_roleScalarFieldEnum | Professor_roleScalarFieldEnum[]
  }


  /**
   * Professor_role findMany
   */
  export type Professor_roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter, which Professor_roles to fetch.
     */
    where?: Professor_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professor_roles to fetch.
     */
    orderBy?: Professor_roleOrderByWithRelationInput | Professor_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professor_roles.
     */
    cursor?: Professor_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professor_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professor_roles.
     */
    skip?: number
    distinct?: Professor_roleScalarFieldEnum | Professor_roleScalarFieldEnum[]
  }


  /**
   * Professor_role create
   */
  export type Professor_roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor_role.
     */
    data: XOR<Professor_roleCreateInput, Professor_roleUncheckedCreateInput>
  }


  /**
   * Professor_role createMany
   */
  export type Professor_roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professor_roles.
     */
    data: Professor_roleCreateManyInput | Professor_roleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Professor_role update
   */
  export type Professor_roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor_role.
     */
    data: XOR<Professor_roleUpdateInput, Professor_roleUncheckedUpdateInput>
    /**
     * Choose, which Professor_role to update.
     */
    where: Professor_roleWhereUniqueInput
  }


  /**
   * Professor_role updateMany
   */
  export type Professor_roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professor_roles.
     */
    data: XOR<Professor_roleUpdateManyMutationInput, Professor_roleUncheckedUpdateManyInput>
    /**
     * Filter which Professor_roles to update
     */
    where?: Professor_roleWhereInput
  }


  /**
   * Professor_role upsert
   */
  export type Professor_roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor_role to update in case it exists.
     */
    where: Professor_roleWhereUniqueInput
    /**
     * In case the Professor_role found by the `where` argument doesn't exist, create a new Professor_role with this data.
     */
    create: XOR<Professor_roleCreateInput, Professor_roleUncheckedCreateInput>
    /**
     * In case the Professor_role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Professor_roleUpdateInput, Professor_roleUncheckedUpdateInput>
  }


  /**
   * Professor_role delete
   */
  export type Professor_roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
    /**
     * Filter which Professor_role to delete.
     */
    where: Professor_roleWhereUniqueInput
  }


  /**
   * Professor_role deleteMany
   */
  export type Professor_roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor_roles to delete
     */
    where?: Professor_roleWhereInput
  }


  /**
   * Professor_role.Project
   */
  export type Professor_role$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }


  /**
   * Professor_role.Research
   */
  export type Professor_role$ResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
  }


  /**
   * Professor_role without action
   */
  export type Professor_roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor_role
     */
    select?: Professor_roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Professor_roleInclude<ExtArgs> | null
  }



  /**
   * Model Servay
   */

  export type AggregateServay = {
    _count: ServayCountAggregateOutputType | null
    _avg: ServayAvgAggregateOutputType | null
    _sum: ServaySumAggregateOutputType | null
    _min: ServayMinAggregateOutputType | null
    _max: ServayMaxAggregateOutputType | null
  }

  export type ServayAvgAggregateOutputType = {
    id: number | null
    professorId: number | null
    rateId: number | null
    questionId: number | null
  }

  export type ServaySumAggregateOutputType = {
    id: number | null
    professorId: number | null
    rateId: number | null
    questionId: number | null
  }

  export type ServayMinAggregateOutputType = {
    id: number | null
    professorId: number | null
    rateId: number | null
    questionId: number | null
  }

  export type ServayMaxAggregateOutputType = {
    id: number | null
    professorId: number | null
    rateId: number | null
    questionId: number | null
  }

  export type ServayCountAggregateOutputType = {
    id: number
    professorId: number
    rateId: number
    questionId: number
    _all: number
  }


  export type ServayAvgAggregateInputType = {
    id?: true
    professorId?: true
    rateId?: true
    questionId?: true
  }

  export type ServaySumAggregateInputType = {
    id?: true
    professorId?: true
    rateId?: true
    questionId?: true
  }

  export type ServayMinAggregateInputType = {
    id?: true
    professorId?: true
    rateId?: true
    questionId?: true
  }

  export type ServayMaxAggregateInputType = {
    id?: true
    professorId?: true
    rateId?: true
    questionId?: true
  }

  export type ServayCountAggregateInputType = {
    id?: true
    professorId?: true
    rateId?: true
    questionId?: true
    _all?: true
  }

  export type ServayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servay to aggregate.
     */
    where?: ServayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servays to fetch.
     */
    orderBy?: ServayOrderByWithRelationInput | ServayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servays
    **/
    _count?: true | ServayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServayMaxAggregateInputType
  }

  export type GetServayAggregateType<T extends ServayAggregateArgs> = {
        [P in keyof T & keyof AggregateServay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServay[P]>
      : GetScalarType<T[P], AggregateServay[P]>
  }




  export type ServayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServayWhereInput
    orderBy?: ServayOrderByWithAggregationInput | ServayOrderByWithAggregationInput[]
    by: ServayScalarFieldEnum[] | ServayScalarFieldEnum
    having?: ServayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServayCountAggregateInputType | true
    _avg?: ServayAvgAggregateInputType
    _sum?: ServaySumAggregateInputType
    _min?: ServayMinAggregateInputType
    _max?: ServayMaxAggregateInputType
  }

  export type ServayGroupByOutputType = {
    id: number
    professorId: number
    rateId: number
    questionId: number
    _count: ServayCountAggregateOutputType | null
    _avg: ServayAvgAggregateOutputType | null
    _sum: ServaySumAggregateOutputType | null
    _min: ServayMinAggregateOutputType | null
    _max: ServayMaxAggregateOutputType | null
  }

  type GetServayGroupByPayload<T extends ServayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServayGroupByOutputType[P]>
            : GetScalarType<T[P], ServayGroupByOutputType[P]>
        }
      >
    >


  export type ServaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professorId?: boolean
    rateId?: boolean
    questionId?: boolean
  }, ExtArgs["result"]["servay"]>

  export type ServaySelectScalar = {
    id?: boolean
    professorId?: boolean
    rateId?: boolean
    questionId?: boolean
  }


  export type $ServayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servay"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      professorId: number
      rateId: number
      questionId: number
    }, ExtArgs["result"]["servay"]>
    composites: {}
  }


  type ServayGetPayload<S extends boolean | null | undefined | ServayDefaultArgs> = $Result.GetResult<Prisma.$ServayPayload, S>

  type ServayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServayFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServayCountAggregateInputType | true
    }

  export interface ServayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servay'], meta: { name: 'Servay' } }
    /**
     * Find zero or one Servay that matches the filter.
     * @param {ServayFindUniqueArgs} args - Arguments to find a Servay
     * @example
     * // Get one Servay
     * const servay = await prisma.servay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServayFindUniqueArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Servay that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServayFindUniqueOrThrowArgs} args - Arguments to find a Servay
     * @example
     * // Get one Servay
     * const servay = await prisma.servay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Servay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayFindFirstArgs} args - Arguments to find a Servay
     * @example
     * // Get one Servay
     * const servay = await prisma.servay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayFindFirstArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Servay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayFindFirstOrThrowArgs} args - Arguments to find a Servay
     * @example
     * // Get one Servay
     * const servay = await prisma.servay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Servays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servays
     * const servays = await prisma.servay.findMany()
     * 
     * // Get first 10 Servays
     * const servays = await prisma.servay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servayWithIdOnly = await prisma.servay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Servay.
     * @param {ServayCreateArgs} args - Arguments to create a Servay.
     * @example
     * // Create one Servay
     * const Servay = await prisma.servay.create({
     *   data: {
     *     // ... data to create a Servay
     *   }
     * })
     * 
    **/
    create<T extends ServayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServayCreateArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Servays.
     *     @param {ServayCreateManyArgs} args - Arguments to create many Servays.
     *     @example
     *     // Create many Servays
     *     const servay = await prisma.servay.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Servay.
     * @param {ServayDeleteArgs} args - Arguments to delete one Servay.
     * @example
     * // Delete one Servay
     * const Servay = await prisma.servay.delete({
     *   where: {
     *     // ... filter to delete one Servay
     *   }
     * })
     * 
    **/
    delete<T extends ServayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServayDeleteArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Servay.
     * @param {ServayUpdateArgs} args - Arguments to update one Servay.
     * @example
     * // Update one Servay
     * const servay = await prisma.servay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServayUpdateArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Servays.
     * @param {ServayDeleteManyArgs} args - Arguments to filter Servays to delete.
     * @example
     * // Delete a few Servays
     * const { count } = await prisma.servay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servays
     * const servay = await prisma.servay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servay.
     * @param {ServayUpsertArgs} args - Arguments to update or create a Servay.
     * @example
     * // Update or create a Servay
     * const servay = await prisma.servay.upsert({
     *   create: {
     *     // ... data to create a Servay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servay we want to update
     *   }
     * })
    **/
    upsert<T extends ServayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServayUpsertArgs<ExtArgs>>
    ): Prisma__ServayClient<$Result.GetResult<Prisma.$ServayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Servays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayCountArgs} args - Arguments to filter Servays to count.
     * @example
     * // Count the number of Servays
     * const count = await prisma.servay.count({
     *   where: {
     *     // ... the filter for the Servays we want to count
     *   }
     * })
    **/
    count<T extends ServayCountArgs>(
      args?: Subset<T, ServayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServayAggregateArgs>(args: Subset<T, ServayAggregateArgs>): Prisma.PrismaPromise<GetServayAggregateType<T>>

    /**
     * Group by Servay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServayGroupByArgs['orderBy'] }
        : { orderBy?: ServayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servay model
   */
  readonly fields: ServayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Servay model
   */ 
  interface ServayFieldRefs {
    readonly id: FieldRef<"Servay", 'Int'>
    readonly professorId: FieldRef<"Servay", 'Int'>
    readonly rateId: FieldRef<"Servay", 'Int'>
    readonly questionId: FieldRef<"Servay", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Servay findUnique
   */
  export type ServayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter, which Servay to fetch.
     */
    where: ServayWhereUniqueInput
  }


  /**
   * Servay findUniqueOrThrow
   */
  export type ServayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter, which Servay to fetch.
     */
    where: ServayWhereUniqueInput
  }


  /**
   * Servay findFirst
   */
  export type ServayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter, which Servay to fetch.
     */
    where?: ServayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servays to fetch.
     */
    orderBy?: ServayOrderByWithRelationInput | ServayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servays.
     */
    cursor?: ServayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servays.
     */
    distinct?: ServayScalarFieldEnum | ServayScalarFieldEnum[]
  }


  /**
   * Servay findFirstOrThrow
   */
  export type ServayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter, which Servay to fetch.
     */
    where?: ServayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servays to fetch.
     */
    orderBy?: ServayOrderByWithRelationInput | ServayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servays.
     */
    cursor?: ServayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servays.
     */
    distinct?: ServayScalarFieldEnum | ServayScalarFieldEnum[]
  }


  /**
   * Servay findMany
   */
  export type ServayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter, which Servays to fetch.
     */
    where?: ServayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servays to fetch.
     */
    orderBy?: ServayOrderByWithRelationInput | ServayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servays.
     */
    cursor?: ServayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servays.
     */
    skip?: number
    distinct?: ServayScalarFieldEnum | ServayScalarFieldEnum[]
  }


  /**
   * Servay create
   */
  export type ServayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * The data needed to create a Servay.
     */
    data: XOR<ServayCreateInput, ServayUncheckedCreateInput>
  }


  /**
   * Servay createMany
   */
  export type ServayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servays.
     */
    data: ServayCreateManyInput | ServayCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Servay update
   */
  export type ServayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * The data needed to update a Servay.
     */
    data: XOR<ServayUpdateInput, ServayUncheckedUpdateInput>
    /**
     * Choose, which Servay to update.
     */
    where: ServayWhereUniqueInput
  }


  /**
   * Servay updateMany
   */
  export type ServayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servays.
     */
    data: XOR<ServayUpdateManyMutationInput, ServayUncheckedUpdateManyInput>
    /**
     * Filter which Servays to update
     */
    where?: ServayWhereInput
  }


  /**
   * Servay upsert
   */
  export type ServayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * The filter to search for the Servay to update in case it exists.
     */
    where: ServayWhereUniqueInput
    /**
     * In case the Servay found by the `where` argument doesn't exist, create a new Servay with this data.
     */
    create: XOR<ServayCreateInput, ServayUncheckedCreateInput>
    /**
     * In case the Servay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServayUpdateInput, ServayUncheckedUpdateInput>
  }


  /**
   * Servay delete
   */
  export type ServayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
    /**
     * Filter which Servay to delete.
     */
    where: ServayWhereUniqueInput
  }


  /**
   * Servay deleteMany
   */
  export type ServayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servays to delete
     */
    where?: ServayWhereInput
  }


  /**
   * Servay without action
   */
  export type ServayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servay
     */
    select?: ServaySelect<ExtArgs> | null
  }



  /**
   * Model Rate
   */

  export type AggregateRate = {
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  export type RateAvgAggregateOutputType = {
    id: number | null
  }

  export type RateSumAggregateOutputType = {
    id: number | null
  }

  export type RateMinAggregateOutputType = {
    id: number | null
    rateType: string | null
    avareage: string | null
  }

  export type RateMaxAggregateOutputType = {
    id: number | null
    rateType: string | null
    avareage: string | null
  }

  export type RateCountAggregateOutputType = {
    id: number
    rateType: number
    avareage: number
    _all: number
  }


  export type RateAvgAggregateInputType = {
    id?: true
  }

  export type RateSumAggregateInputType = {
    id?: true
  }

  export type RateMinAggregateInputType = {
    id?: true
    rateType?: true
    avareage?: true
  }

  export type RateMaxAggregateInputType = {
    id?: true
    rateType?: true
    avareage?: true
  }

  export type RateCountAggregateInputType = {
    id?: true
    rateType?: true
    avareage?: true
    _all?: true
  }

  export type RateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rate to aggregate.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rates
    **/
    _count?: true | RateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateMaxAggregateInputType
  }

  export type GetRateAggregateType<T extends RateAggregateArgs> = {
        [P in keyof T & keyof AggregateRate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRate[P]>
      : GetScalarType<T[P], AggregateRate[P]>
  }




  export type RateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
    orderBy?: RateOrderByWithAggregationInput | RateOrderByWithAggregationInput[]
    by: RateScalarFieldEnum[] | RateScalarFieldEnum
    having?: RateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateCountAggregateInputType | true
    _avg?: RateAvgAggregateInputType
    _sum?: RateSumAggregateInputType
    _min?: RateMinAggregateInputType
    _max?: RateMaxAggregateInputType
  }

  export type RateGroupByOutputType = {
    id: number
    rateType: string
    avareage: string
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  type GetRateGroupByPayload<T extends RateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateGroupByOutputType[P]>
            : GetScalarType<T[P], RateGroupByOutputType[P]>
        }
      >
    >


  export type RateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rateType?: boolean
    avareage?: boolean
  }, ExtArgs["result"]["rate"]>

  export type RateSelectScalar = {
    id?: boolean
    rateType?: boolean
    avareage?: boolean
  }


  export type $RatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rateType: string
      avareage: string
    }, ExtArgs["result"]["rate"]>
    composites: {}
  }


  type RateGetPayload<S extends boolean | null | undefined | RateDefaultArgs> = $Result.GetResult<Prisma.$RatePayload, S>

  type RateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RateFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RateCountAggregateInputType | true
    }

  export interface RateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rate'], meta: { name: 'Rate' } }
    /**
     * Find zero or one Rate that matches the filter.
     * @param {RateFindUniqueArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RateFindUniqueArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RateFindUniqueOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rates
     * const rates = await prisma.rate.findMany()
     * 
     * // Get first 10 Rates
     * const rates = await prisma.rate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rateWithIdOnly = await prisma.rate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rate.
     * @param {RateCreateArgs} args - Arguments to create a Rate.
     * @example
     * // Create one Rate
     * const Rate = await prisma.rate.create({
     *   data: {
     *     // ... data to create a Rate
     *   }
     * })
     * 
    **/
    create<T extends RateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RateCreateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rates.
     *     @param {RateCreateManyArgs} args - Arguments to create many Rates.
     *     @example
     *     // Create many Rates
     *     const rate = await prisma.rate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rate.
     * @param {RateDeleteArgs} args - Arguments to delete one Rate.
     * @example
     * // Delete one Rate
     * const Rate = await prisma.rate.delete({
     *   where: {
     *     // ... filter to delete one Rate
     *   }
     * })
     * 
    **/
    delete<T extends RateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RateDeleteArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rate.
     * @param {RateUpdateArgs} args - Arguments to update one Rate.
     * @example
     * // Update one Rate
     * const rate = await prisma.rate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rates.
     * @param {RateDeleteManyArgs} args - Arguments to filter Rates to delete.
     * @example
     * // Delete a few Rates
     * const { count } = await prisma.rate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rates
     * const rate = await prisma.rate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rate.
     * @param {RateUpsertArgs} args - Arguments to update or create a Rate.
     * @example
     * // Update or create a Rate
     * const rate = await prisma.rate.upsert({
     *   create: {
     *     // ... data to create a Rate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rate we want to update
     *   }
     * })
    **/
    upsert<T extends RateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpsertArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateCountArgs} args - Arguments to filter Rates to count.
     * @example
     * // Count the number of Rates
     * const count = await prisma.rate.count({
     *   where: {
     *     // ... the filter for the Rates we want to count
     *   }
     * })
    **/
    count<T extends RateCountArgs>(
      args?: Subset<T, RateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateAggregateArgs>(args: Subset<T, RateAggregateArgs>): Prisma.PrismaPromise<GetRateAggregateType<T>>

    /**
     * Group by Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateGroupByArgs['orderBy'] }
        : { orderBy?: RateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rate model
   */
  readonly fields: RateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rate model
   */ 
  interface RateFieldRefs {
    readonly id: FieldRef<"Rate", 'Int'>
    readonly rateType: FieldRef<"Rate", 'String'>
    readonly avareage: FieldRef<"Rate", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Rate findUnique
   */
  export type RateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findUniqueOrThrow
   */
  export type RateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findFirst
   */
  export type RateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findFirstOrThrow
   */
  export type RateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findMany
   */
  export type RateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter, which Rates to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate create
   */
  export type RateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * The data needed to create a Rate.
     */
    data: XOR<RateCreateInput, RateUncheckedCreateInput>
  }


  /**
   * Rate createMany
   */
  export type RateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rates.
     */
    data: RateCreateManyInput | RateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rate update
   */
  export type RateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * The data needed to update a Rate.
     */
    data: XOR<RateUpdateInput, RateUncheckedUpdateInput>
    /**
     * Choose, which Rate to update.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate updateMany
   */
  export type RateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rates.
     */
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyInput>
    /**
     * Filter which Rates to update
     */
    where?: RateWhereInput
  }


  /**
   * Rate upsert
   */
  export type RateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * The filter to search for the Rate to update in case it exists.
     */
    where: RateWhereUniqueInput
    /**
     * In case the Rate found by the `where` argument doesn't exist, create a new Rate with this data.
     */
    create: XOR<RateCreateInput, RateUncheckedCreateInput>
    /**
     * In case the Rate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateUpdateInput, RateUncheckedUpdateInput>
  }


  /**
   * Rate delete
   */
  export type RateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Filter which Rate to delete.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate deleteMany
   */
  export type RateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rates to delete
     */
    where?: RateWhereInput
  }


  /**
   * Rate without action
   */
  export type RateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
  }



  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    question: string
    answer: string
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    question?: boolean
    answer?: boolean
  }


  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      answer: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }


  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends QuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const question = await prisma.question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends QuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly question: FieldRef<"Question", 'String'>
    readonly answer: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }


  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }


  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }


  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }


  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    specialty: 'specialty',
    phoneNumber: 'phoneNumber',
    image: 'image',
    token: 'token',
    departmentId: 'departmentId'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const Professor_attachmentScalarFieldEnum: {
    id: 'id',
    ssn: 'ssn',
    gender: 'gender',
    degreeDate: 'degreeDate',
    degreeId: 'degreeId',
    professorId: 'professorId'
  };

  export type Professor_attachmentScalarFieldEnum = (typeof Professor_attachmentScalarFieldEnum)[keyof typeof Professor_attachmentScalarFieldEnum]


  export const DegreeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    university: 'university'
  };

  export type DegreeScalarFieldEnum = (typeof DegreeScalarFieldEnum)[keyof typeof DegreeScalarFieldEnum]


  export const ResearchScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    createdBy: 'createdBy',
    pagesNumper: 'pagesNumper',
    publisher: 'publisher',
    magazinName: 'magazinName',
    magazinVolume: 'magazinVolume',
    publishYear: 'publishYear',
    majoring: 'majoring',
    typeId: 'typeId',
    departmentId: 'departmentId',
    professorRoleId: 'professorRoleId',
    authorId: 'authorId',
    supervisorId: 'supervisorId'
  };

  export type ResearchScalarFieldEnum = (typeof ResearchScalarFieldEnum)[keyof typeof ResearchScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    projectId: 'projectId',
    projectName: 'projectName',
    description: 'description',
    topic: 'topic',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    createdBy: 'createdBy',
    affiliate: 'affiliate',
    typeId: 'typeId',
    departmentId: 'departmentId',
    professorRoleId: 'professorRoleId',
    authorId: 'authorId',
    supervisorId: 'supervisorId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    HeadId: 'HeadId'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const Professor_roleScalarFieldEnum: {
    id: 'id',
    role: 'role'
  };

  export type Professor_roleScalarFieldEnum = (typeof Professor_roleScalarFieldEnum)[keyof typeof Professor_roleScalarFieldEnum]


  export const ServayScalarFieldEnum: {
    id: 'id',
    professorId: 'professorId',
    rateId: 'rateId',
    questionId: 'questionId'
  };

  export type ServayScalarFieldEnum = (typeof ServayScalarFieldEnum)[keyof typeof ServayScalarFieldEnum]


  export const RateScalarFieldEnum: {
    id: 'id',
    rateType: 'rateType',
    avareage: 'avareage'
  };

  export type RateScalarFieldEnum = (typeof RateScalarFieldEnum)[keyof typeof RateScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    id?: IntFilter<"Professor"> | number
    firstName?: StringFilter<"Professor"> | string
    lastName?: StringFilter<"Professor"> | string
    email?: StringFilter<"Professor"> | string
    password?: StringFilter<"Professor"> | string
    specialty?: StringNullableFilter<"Professor"> | string | null
    phoneNumber?: StringNullableFilter<"Professor"> | string | null
    image?: StringNullableFilter<"Professor"> | string | null
    token?: StringFilter<"Professor"> | string
    departmentId?: IntFilter<"Professor"> | number
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    professorHas?: XOR<Professor_attachmentNullableRelationFilter, Professor_attachmentWhereInput> | null
    MasterResearch?: ResearchListRelationFilter
    ProfessorResearch?: ResearchListRelationFilter
    GraduationProject?: ProjectListRelationFilter
    ProfessorProject?: ProjectListRelationFilter
    DepartmentHead?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    specialty?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    token?: SortOrder
    departmentId?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    professorHas?: Professor_attachmentOrderByWithRelationInput
    MasterResearch?: ResearchOrderByRelationAggregateInput
    ProfessorResearch?: ResearchOrderByRelationAggregateInput
    GraduationProject?: ProjectOrderByRelationAggregateInput
    ProfessorProject?: ProjectOrderByRelationAggregateInput
    DepartmentHead?: DepartmentOrderByWithRelationInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    departmentId?: number
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    firstName?: StringFilter<"Professor"> | string
    lastName?: StringFilter<"Professor"> | string
    password?: StringFilter<"Professor"> | string
    specialty?: StringNullableFilter<"Professor"> | string | null
    phoneNumber?: StringNullableFilter<"Professor"> | string | null
    image?: StringNullableFilter<"Professor"> | string | null
    token?: StringFilter<"Professor"> | string
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    professorHas?: XOR<Professor_attachmentNullableRelationFilter, Professor_attachmentWhereInput> | null
    MasterResearch?: ResearchListRelationFilter
    ProfessorResearch?: ResearchListRelationFilter
    GraduationProject?: ProjectListRelationFilter
    ProfessorProject?: ProjectListRelationFilter
    DepartmentHead?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }, "id" | "email" | "departmentId">

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    specialty?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    token?: SortOrder
    departmentId?: SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _avg?: ProfessorAvgOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
    _sum?: ProfessorSumOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Professor"> | number
    firstName?: StringWithAggregatesFilter<"Professor"> | string
    lastName?: StringWithAggregatesFilter<"Professor"> | string
    email?: StringWithAggregatesFilter<"Professor"> | string
    password?: StringWithAggregatesFilter<"Professor"> | string
    specialty?: StringNullableWithAggregatesFilter<"Professor"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Professor"> | string | null
    image?: StringNullableWithAggregatesFilter<"Professor"> | string | null
    token?: StringWithAggregatesFilter<"Professor"> | string
    departmentId?: IntWithAggregatesFilter<"Professor"> | number
  }

  export type Professor_attachmentWhereInput = {
    AND?: Professor_attachmentWhereInput | Professor_attachmentWhereInput[]
    OR?: Professor_attachmentWhereInput[]
    NOT?: Professor_attachmentWhereInput | Professor_attachmentWhereInput[]
    id?: IntFilter<"Professor_attachment"> | number
    ssn?: IntFilter<"Professor_attachment"> | number
    gender?: StringFilter<"Professor_attachment"> | string
    degreeDate?: DateTimeFilter<"Professor_attachment"> | Date | string
    degreeId?: IntFilter<"Professor_attachment"> | number
    professorId?: IntFilter<"Professor_attachment"> | number
    degree?: XOR<DegreeRelationFilter, DegreeWhereInput>
    professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }

  export type Professor_attachmentOrderByWithRelationInput = {
    id?: SortOrder
    ssn?: SortOrder
    gender?: SortOrder
    degreeDate?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
    degree?: DegreeOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
  }

  export type Professor_attachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    degreeId?: number
    professorId?: number
    AND?: Professor_attachmentWhereInput | Professor_attachmentWhereInput[]
    OR?: Professor_attachmentWhereInput[]
    NOT?: Professor_attachmentWhereInput | Professor_attachmentWhereInput[]
    ssn?: IntFilter<"Professor_attachment"> | number
    gender?: StringFilter<"Professor_attachment"> | string
    degreeDate?: DateTimeFilter<"Professor_attachment"> | Date | string
    degree?: XOR<DegreeRelationFilter, DegreeWhereInput>
    professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }, "id" | "degreeId" | "professorId">

  export type Professor_attachmentOrderByWithAggregationInput = {
    id?: SortOrder
    ssn?: SortOrder
    gender?: SortOrder
    degreeDate?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
    _count?: Professor_attachmentCountOrderByAggregateInput
    _avg?: Professor_attachmentAvgOrderByAggregateInput
    _max?: Professor_attachmentMaxOrderByAggregateInput
    _min?: Professor_attachmentMinOrderByAggregateInput
    _sum?: Professor_attachmentSumOrderByAggregateInput
  }

  export type Professor_attachmentScalarWhereWithAggregatesInput = {
    AND?: Professor_attachmentScalarWhereWithAggregatesInput | Professor_attachmentScalarWhereWithAggregatesInput[]
    OR?: Professor_attachmentScalarWhereWithAggregatesInput[]
    NOT?: Professor_attachmentScalarWhereWithAggregatesInput | Professor_attachmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Professor_attachment"> | number
    ssn?: IntWithAggregatesFilter<"Professor_attachment"> | number
    gender?: StringWithAggregatesFilter<"Professor_attachment"> | string
    degreeDate?: DateTimeWithAggregatesFilter<"Professor_attachment"> | Date | string
    degreeId?: IntWithAggregatesFilter<"Professor_attachment"> | number
    professorId?: IntWithAggregatesFilter<"Professor_attachment"> | number
  }

  export type DegreeWhereInput = {
    AND?: DegreeWhereInput | DegreeWhereInput[]
    OR?: DegreeWhereInput[]
    NOT?: DegreeWhereInput | DegreeWhereInput[]
    id?: IntFilter<"Degree"> | number
    name?: StringFilter<"Degree"> | string
    university?: StringFilter<"Degree"> | string
    ProfessorDegree?: XOR<Professor_attachmentNullableRelationFilter, Professor_attachmentWhereInput> | null
  }

  export type DegreeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    university?: SortOrder
    ProfessorDegree?: Professor_attachmentOrderByWithRelationInput
  }

  export type DegreeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DegreeWhereInput | DegreeWhereInput[]
    OR?: DegreeWhereInput[]
    NOT?: DegreeWhereInput | DegreeWhereInput[]
    name?: StringFilter<"Degree"> | string
    university?: StringFilter<"Degree"> | string
    ProfessorDegree?: XOR<Professor_attachmentNullableRelationFilter, Professor_attachmentWhereInput> | null
  }, "id">

  export type DegreeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    university?: SortOrder
    _count?: DegreeCountOrderByAggregateInput
    _avg?: DegreeAvgOrderByAggregateInput
    _max?: DegreeMaxOrderByAggregateInput
    _min?: DegreeMinOrderByAggregateInput
    _sum?: DegreeSumOrderByAggregateInput
  }

  export type DegreeScalarWhereWithAggregatesInput = {
    AND?: DegreeScalarWhereWithAggregatesInput | DegreeScalarWhereWithAggregatesInput[]
    OR?: DegreeScalarWhereWithAggregatesInput[]
    NOT?: DegreeScalarWhereWithAggregatesInput | DegreeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Degree"> | number
    name?: StringWithAggregatesFilter<"Degree"> | string
    university?: StringWithAggregatesFilter<"Degree"> | string
  }

  export type ResearchWhereInput = {
    AND?: ResearchWhereInput | ResearchWhereInput[]
    OR?: ResearchWhereInput[]
    NOT?: ResearchWhereInput | ResearchWhereInput[]
    id?: IntFilter<"Research"> | number
    title?: StringFilter<"Research"> | string
    description?: StringFilter<"Research"> | string
    startDate?: DateTimeFilter<"Research"> | Date | string
    endDate?: DateTimeFilter<"Research"> | Date | string
    status?: StringFilter<"Research"> | string
    createdBy?: StringFilter<"Research"> | string
    pagesNumper?: IntFilter<"Research"> | number
    publisher?: StringFilter<"Research"> | string
    magazinName?: StringFilter<"Research"> | string
    magazinVolume?: StringFilter<"Research"> | string
    publishYear?: IntFilter<"Research"> | number
    majoring?: StringFilter<"Research"> | string
    typeId?: IntFilter<"Research"> | number
    departmentId?: IntFilter<"Research"> | number
    professorRoleId?: IntFilter<"Research"> | number
    authorId?: IntFilter<"Research"> | number
    supervisorId?: IntFilter<"Research"> | number
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    ProfessorRole?: XOR<Professor_roleRelationFilter, Professor_roleWhereInput>
    author?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    supervisor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }

  export type ResearchOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    pagesNumper?: SortOrder
    publisher?: SortOrder
    magazinName?: SortOrder
    magazinVolume?: SortOrder
    publishYear?: SortOrder
    majoring?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
    type?: TypeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    ProfessorRole?: Professor_roleOrderByWithRelationInput
    author?: ProfessorOrderByWithRelationInput
    supervisor?: ProfessorOrderByWithRelationInput
  }

  export type ResearchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    typeId?: number
    departmentId?: number
    professorRoleId?: number
    AND?: ResearchWhereInput | ResearchWhereInput[]
    OR?: ResearchWhereInput[]
    NOT?: ResearchWhereInput | ResearchWhereInput[]
    title?: StringFilter<"Research"> | string
    description?: StringFilter<"Research"> | string
    startDate?: DateTimeFilter<"Research"> | Date | string
    endDate?: DateTimeFilter<"Research"> | Date | string
    status?: StringFilter<"Research"> | string
    createdBy?: StringFilter<"Research"> | string
    pagesNumper?: IntFilter<"Research"> | number
    publisher?: StringFilter<"Research"> | string
    magazinName?: StringFilter<"Research"> | string
    magazinVolume?: StringFilter<"Research"> | string
    publishYear?: IntFilter<"Research"> | number
    majoring?: StringFilter<"Research"> | string
    authorId?: IntFilter<"Research"> | number
    supervisorId?: IntFilter<"Research"> | number
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    ProfessorRole?: XOR<Professor_roleRelationFilter, Professor_roleWhereInput>
    author?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    supervisor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }, "id" | "typeId" | "departmentId" | "professorRoleId">

  export type ResearchOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    pagesNumper?: SortOrder
    publisher?: SortOrder
    magazinName?: SortOrder
    magazinVolume?: SortOrder
    publishYear?: SortOrder
    majoring?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
    _count?: ResearchCountOrderByAggregateInput
    _avg?: ResearchAvgOrderByAggregateInput
    _max?: ResearchMaxOrderByAggregateInput
    _min?: ResearchMinOrderByAggregateInput
    _sum?: ResearchSumOrderByAggregateInput
  }

  export type ResearchScalarWhereWithAggregatesInput = {
    AND?: ResearchScalarWhereWithAggregatesInput | ResearchScalarWhereWithAggregatesInput[]
    OR?: ResearchScalarWhereWithAggregatesInput[]
    NOT?: ResearchScalarWhereWithAggregatesInput | ResearchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Research"> | number
    title?: StringWithAggregatesFilter<"Research"> | string
    description?: StringWithAggregatesFilter<"Research"> | string
    startDate?: DateTimeWithAggregatesFilter<"Research"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Research"> | Date | string
    status?: StringWithAggregatesFilter<"Research"> | string
    createdBy?: StringWithAggregatesFilter<"Research"> | string
    pagesNumper?: IntWithAggregatesFilter<"Research"> | number
    publisher?: StringWithAggregatesFilter<"Research"> | string
    magazinName?: StringWithAggregatesFilter<"Research"> | string
    magazinVolume?: StringWithAggregatesFilter<"Research"> | string
    publishYear?: IntWithAggregatesFilter<"Research"> | number
    majoring?: StringWithAggregatesFilter<"Research"> | string
    typeId?: IntWithAggregatesFilter<"Research"> | number
    departmentId?: IntWithAggregatesFilter<"Research"> | number
    professorRoleId?: IntWithAggregatesFilter<"Research"> | number
    authorId?: IntWithAggregatesFilter<"Research"> | number
    supervisorId?: IntWithAggregatesFilter<"Research"> | number
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectId?: IntFilter<"Project"> | number
    projectName?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    topic?: StringFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    status?: StringFilter<"Project"> | string
    createdBy?: StringFilter<"Project"> | string
    affiliate?: StringFilter<"Project"> | string
    typeId?: IntFilter<"Project"> | number
    departmentId?: IntFilter<"Project"> | number
    professorRoleId?: IntFilter<"Project"> | number
    authorId?: IntFilter<"Project"> | number
    supervisorId?: IntFilter<"Project"> | number
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    ProfessorRole?: XOR<Professor_roleRelationFilter, Professor_roleWhereInput>
    author?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    supervisor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }

  export type ProjectOrderByWithRelationInput = {
    projectId?: SortOrder
    projectName?: SortOrder
    description?: SortOrder
    topic?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    affiliate?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
    type?: TypeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    ProfessorRole?: Professor_roleOrderByWithRelationInput
    author?: ProfessorOrderByWithRelationInput
    supervisor?: ProfessorOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    projectId?: number
    typeId?: number
    departmentId?: number
    professorRoleId?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectName?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    topic?: StringFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    status?: StringFilter<"Project"> | string
    createdBy?: StringFilter<"Project"> | string
    affiliate?: StringFilter<"Project"> | string
    authorId?: IntFilter<"Project"> | number
    supervisorId?: IntFilter<"Project"> | number
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    ProfessorRole?: XOR<Professor_roleRelationFilter, Professor_roleWhereInput>
    author?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    supervisor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }, "projectId" | "typeId" | "departmentId" | "professorRoleId">

  export type ProjectOrderByWithAggregationInput = {
    projectId?: SortOrder
    projectName?: SortOrder
    description?: SortOrder
    topic?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    affiliate?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    projectId?: IntWithAggregatesFilter<"Project"> | number
    projectName?: StringWithAggregatesFilter<"Project"> | string
    description?: StringWithAggregatesFilter<"Project"> | string
    topic?: StringWithAggregatesFilter<"Project"> | string
    startDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    status?: StringWithAggregatesFilter<"Project"> | string
    createdBy?: StringWithAggregatesFilter<"Project"> | string
    affiliate?: StringWithAggregatesFilter<"Project"> | string
    typeId?: IntWithAggregatesFilter<"Project"> | number
    departmentId?: IntWithAggregatesFilter<"Project"> | number
    professorRoleId?: IntWithAggregatesFilter<"Project"> | number
    authorId?: IntWithAggregatesFilter<"Project"> | number
    supervisorId?: IntWithAggregatesFilter<"Project"> | number
  }

  export type TypeWhereInput = {
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    id?: IntFilter<"Type"> | number
    name?: StringFilter<"Type"> | string
    Project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    Research?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Project?: ProjectOrderByWithRelationInput
    Research?: ResearchOrderByWithRelationInput
  }

  export type TypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    name?: StringFilter<"Type"> | string
    Project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    Research?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
  }, "id">

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    OR?: TypeScalarWhereWithAggregatesInput[]
    NOT?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Type"> | number
    name?: StringWithAggregatesFilter<"Type"> | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    HeadId?: IntFilter<"Department"> | number
    head?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    ProfessorDepartment?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    ResearchDepartment?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
    ProjectDepartment?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    HeadId?: SortOrder
    head?: ProfessorOrderByWithRelationInput
    ProfessorDepartment?: ProfessorOrderByWithRelationInput
    ResearchDepartment?: ResearchOrderByWithRelationInput
    ProjectDepartment?: ProjectOrderByWithRelationInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    HeadId?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    head?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    ProfessorDepartment?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    ResearchDepartment?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
    ProjectDepartment?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }, "id" | "HeadId">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    HeadId?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: StringWithAggregatesFilter<"Department"> | string
    HeadId?: IntWithAggregatesFilter<"Department"> | number
  }

  export type Professor_roleWhereInput = {
    AND?: Professor_roleWhereInput | Professor_roleWhereInput[]
    OR?: Professor_roleWhereInput[]
    NOT?: Professor_roleWhereInput | Professor_roleWhereInput[]
    id?: IntFilter<"Professor_role"> | number
    role?: StringFilter<"Professor_role"> | string
    Project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    Research?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
  }

  export type Professor_roleOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    Project?: ProjectOrderByWithRelationInput
    Research?: ResearchOrderByWithRelationInput
  }

  export type Professor_roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Professor_roleWhereInput | Professor_roleWhereInput[]
    OR?: Professor_roleWhereInput[]
    NOT?: Professor_roleWhereInput | Professor_roleWhereInput[]
    role?: StringFilter<"Professor_role"> | string
    Project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    Research?: XOR<ResearchNullableRelationFilter, ResearchWhereInput> | null
  }, "id">

  export type Professor_roleOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    _count?: Professor_roleCountOrderByAggregateInput
    _avg?: Professor_roleAvgOrderByAggregateInput
    _max?: Professor_roleMaxOrderByAggregateInput
    _min?: Professor_roleMinOrderByAggregateInput
    _sum?: Professor_roleSumOrderByAggregateInput
  }

  export type Professor_roleScalarWhereWithAggregatesInput = {
    AND?: Professor_roleScalarWhereWithAggregatesInput | Professor_roleScalarWhereWithAggregatesInput[]
    OR?: Professor_roleScalarWhereWithAggregatesInput[]
    NOT?: Professor_roleScalarWhereWithAggregatesInput | Professor_roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Professor_role"> | number
    role?: StringWithAggregatesFilter<"Professor_role"> | string
  }

  export type ServayWhereInput = {
    AND?: ServayWhereInput | ServayWhereInput[]
    OR?: ServayWhereInput[]
    NOT?: ServayWhereInput | ServayWhereInput[]
    id?: IntFilter<"Servay"> | number
    professorId?: IntFilter<"Servay"> | number
    rateId?: IntFilter<"Servay"> | number
    questionId?: IntFilter<"Servay"> | number
  }

  export type ServayOrderByWithRelationInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type ServayWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServayWhereInput | ServayWhereInput[]
    OR?: ServayWhereInput[]
    NOT?: ServayWhereInput | ServayWhereInput[]
    professorId?: IntFilter<"Servay"> | number
    rateId?: IntFilter<"Servay"> | number
    questionId?: IntFilter<"Servay"> | number
  }, "id">

  export type ServayOrderByWithAggregationInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
    _count?: ServayCountOrderByAggregateInput
    _avg?: ServayAvgOrderByAggregateInput
    _max?: ServayMaxOrderByAggregateInput
    _min?: ServayMinOrderByAggregateInput
    _sum?: ServaySumOrderByAggregateInput
  }

  export type ServayScalarWhereWithAggregatesInput = {
    AND?: ServayScalarWhereWithAggregatesInput | ServayScalarWhereWithAggregatesInput[]
    OR?: ServayScalarWhereWithAggregatesInput[]
    NOT?: ServayScalarWhereWithAggregatesInput | ServayScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Servay"> | number
    professorId?: IntWithAggregatesFilter<"Servay"> | number
    rateId?: IntWithAggregatesFilter<"Servay"> | number
    questionId?: IntWithAggregatesFilter<"Servay"> | number
  }

  export type RateWhereInput = {
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    id?: IntFilter<"Rate"> | number
    rateType?: StringFilter<"Rate"> | string
    avareage?: StringFilter<"Rate"> | string
  }

  export type RateOrderByWithRelationInput = {
    id?: SortOrder
    rateType?: SortOrder
    avareage?: SortOrder
  }

  export type RateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    rateType?: StringFilter<"Rate"> | string
    avareage?: StringFilter<"Rate"> | string
  }, "id">

  export type RateOrderByWithAggregationInput = {
    id?: SortOrder
    rateType?: SortOrder
    avareage?: SortOrder
    _count?: RateCountOrderByAggregateInput
    _avg?: RateAvgOrderByAggregateInput
    _max?: RateMaxOrderByAggregateInput
    _min?: RateMinOrderByAggregateInput
    _sum?: RateSumOrderByAggregateInput
  }

  export type RateScalarWhereWithAggregatesInput = {
    AND?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    OR?: RateScalarWhereWithAggregatesInput[]
    NOT?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rate"> | number
    rateType?: StringWithAggregatesFilter<"Rate"> | string
    avareage?: StringWithAggregatesFilter<"Rate"> | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    question?: StringFilter<"Question"> | string
    answer?: StringFilter<"Question"> | string
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    question?: StringFilter<"Question"> | string
    answer?: StringFilter<"Question"> | string
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    question?: StringWithAggregatesFilter<"Question"> | string
    answer?: StringWithAggregatesFilter<"Question"> | string
  }

  export type ProfessorCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
  }

  export type ProfessorUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
  }

  export type Professor_attachmentCreateInput = {
    ssn: number
    gender: string
    degreeDate: Date | string
    degree: DegreeCreateNestedOneWithoutProfessorDegreeInput
    professor: ProfessorCreateNestedOneWithoutProfessorHasInput
  }

  export type Professor_attachmentUncheckedCreateInput = {
    id?: number
    ssn: number
    gender: string
    degreeDate: Date | string
    degreeId: number
    professorId: number
  }

  export type Professor_attachmentUpdateInput = {
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: DegreeUpdateOneRequiredWithoutProfessorDegreeNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProfessorHasNestedInput
  }

  export type Professor_attachmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    degreeId?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
  }

  export type Professor_attachmentCreateManyInput = {
    id?: number
    ssn: number
    gender: string
    degreeDate: Date | string
    degreeId: number
    professorId: number
  }

  export type Professor_attachmentUpdateManyMutationInput = {
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Professor_attachmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    degreeId?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
  }

  export type DegreeCreateInput = {
    name: string
    university: string
    ProfessorDegree?: Professor_attachmentCreateNestedOneWithoutDegreeInput
  }

  export type DegreeUncheckedCreateInput = {
    id?: number
    name: string
    university: string
    ProfessorDegree?: Professor_attachmentUncheckedCreateNestedOneWithoutDegreeInput
  }

  export type DegreeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    ProfessorDegree?: Professor_attachmentUpdateOneWithoutDegreeNestedInput
  }

  export type DegreeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    ProfessorDegree?: Professor_attachmentUncheckedUpdateOneWithoutDegreeNestedInput
  }

  export type DegreeCreateManyInput = {
    id?: number
    name: string
    university: string
  }

  export type DegreeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type DegreeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type ResearchCreateInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    type: TypeCreateNestedOneWithoutResearchInput
    department: DepartmentCreateNestedOneWithoutResearchDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutResearchInput
    author: ProfessorCreateNestedOneWithoutProfessorResearchInput
    supervisor: ProfessorCreateNestedOneWithoutMasterResearchInput
  }

  export type ResearchUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ResearchUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutResearchNestedInput
    department?: DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutResearchNestedInput
    author?: ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput
  }

  export type ResearchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchCreateManyInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ResearchUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
  }

  export type ResearchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectCreateInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    type: TypeCreateNestedOneWithoutProjectInput
    department: DepartmentCreateNestedOneWithoutProjectDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutProjectInput
    author: ProfessorCreateNestedOneWithoutGraduationProjectInput
    supervisor: ProfessorCreateNestedOneWithoutProfessorProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ProjectUpdateInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutProjectNestedInput
    department?: DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutProjectNestedInput
    author?: ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectCreateManyInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ProjectUpdateManyMutationInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type TypeCreateInput = {
    name: string
    Project?: ProjectCreateNestedOneWithoutTypeInput
    Research?: ResearchCreateNestedOneWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: number
    name: string
    Project?: ProjectUncheckedCreateNestedOneWithoutTypeInput
    Research?: ResearchUncheckedCreateNestedOneWithoutTypeInput
  }

  export type TypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateOneWithoutTypeNestedInput
    Research?: ResearchUpdateOneWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateOneWithoutTypeNestedInput
    Research?: ResearchUncheckedUpdateOneWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    id?: number
    name: string
  }

  export type TypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentCreateInput = {
    name: string
    head: ProfessorCreateNestedOneWithoutDepartmentHeadInput
    ProfessorDepartment?: ProfessorCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    HeadId: number
    ProfessorDepartment?: ProfessorUncheckedCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchUncheckedCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    head?: ProfessorUpdateOneRequiredWithoutDepartmentHeadNestedInput
    ProfessorDepartment?: ProfessorUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    HeadId?: IntFieldUpdateOperationsInput | number
    ProfessorDepartment?: ProfessorUncheckedUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUncheckedUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: string
    HeadId: number
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    HeadId?: IntFieldUpdateOperationsInput | number
  }

  export type Professor_roleCreateInput = {
    role: string
    Project?: ProjectCreateNestedOneWithoutProfessorRoleInput
    Research?: ResearchCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleUncheckedCreateInput = {
    id?: number
    role: string
    Project?: ProjectUncheckedCreateNestedOneWithoutProfessorRoleInput
    Research?: ResearchUncheckedCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateOneWithoutProfessorRoleNestedInput
    Research?: ResearchUpdateOneWithoutProfessorRoleNestedInput
  }

  export type Professor_roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateOneWithoutProfessorRoleNestedInput
    Research?: ResearchUncheckedUpdateOneWithoutProfessorRoleNestedInput
  }

  export type Professor_roleCreateManyInput = {
    id?: number
    role: string
  }

  export type Professor_roleUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type Professor_roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ServayCreateInput = {
    professorId: number
    rateId: number
    questionId: number
  }

  export type ServayUncheckedCreateInput = {
    id?: number
    professorId: number
    rateId: number
    questionId: number
  }

  export type ServayUpdateInput = {
    professorId?: IntFieldUpdateOperationsInput | number
    rateId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type ServayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
    rateId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type ServayCreateManyInput = {
    id?: number
    professorId: number
    rateId: number
    questionId: number
  }

  export type ServayUpdateManyMutationInput = {
    professorId?: IntFieldUpdateOperationsInput | number
    rateId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type ServayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
    rateId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type RateCreateInput = {
    rateType: string
    avareage: string
  }

  export type RateUncheckedCreateInput = {
    id?: number
    rateType: string
    avareage: string
  }

  export type RateUpdateInput = {
    rateType?: StringFieldUpdateOperationsInput | string
    avareage?: StringFieldUpdateOperationsInput | string
  }

  export type RateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rateType?: StringFieldUpdateOperationsInput | string
    avareage?: StringFieldUpdateOperationsInput | string
  }

  export type RateCreateManyInput = {
    id?: number
    rateType: string
    avareage: string
  }

  export type RateUpdateManyMutationInput = {
    rateType?: StringFieldUpdateOperationsInput | string
    avareage?: StringFieldUpdateOperationsInput | string
  }

  export type RateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rateType?: StringFieldUpdateOperationsInput | string
    avareage?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateInput = {
    question: string
    answer: string
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    question: string
    answer: string
  }

  export type QuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateManyInput = {
    id?: number
    question: string
    answer: string
  }

  export type QuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type Professor_attachmentNullableRelationFilter = {
    is?: Professor_attachmentWhereInput | null
    isNot?: Professor_attachmentWhereInput | null
  }

  export type ResearchListRelationFilter = {
    every?: ResearchWhereInput
    some?: ResearchWhereInput
    none?: ResearchWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ResearchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    specialty?: SortOrder
    phoneNumber?: SortOrder
    image?: SortOrder
    token?: SortOrder
    departmentId?: SortOrder
  }

  export type ProfessorAvgOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    specialty?: SortOrder
    phoneNumber?: SortOrder
    image?: SortOrder
    token?: SortOrder
    departmentId?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    specialty?: SortOrder
    phoneNumber?: SortOrder
    image?: SortOrder
    token?: SortOrder
    departmentId?: SortOrder
  }

  export type ProfessorSumOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DegreeRelationFilter = {
    is?: DegreeWhereInput
    isNot?: DegreeWhereInput
  }

  export type ProfessorRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type Professor_attachmentCountOrderByAggregateInput = {
    id?: SortOrder
    ssn?: SortOrder
    gender?: SortOrder
    degreeDate?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
  }

  export type Professor_attachmentAvgOrderByAggregateInput = {
    id?: SortOrder
    ssn?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
  }

  export type Professor_attachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    ssn?: SortOrder
    gender?: SortOrder
    degreeDate?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
  }

  export type Professor_attachmentMinOrderByAggregateInput = {
    id?: SortOrder
    ssn?: SortOrder
    gender?: SortOrder
    degreeDate?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
  }

  export type Professor_attachmentSumOrderByAggregateInput = {
    id?: SortOrder
    ssn?: SortOrder
    degreeId?: SortOrder
    professorId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DegreeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    university?: SortOrder
  }

  export type DegreeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DegreeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    university?: SortOrder
  }

  export type DegreeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    university?: SortOrder
  }

  export type DegreeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput
    isNot?: TypeWhereInput
  }

  export type Professor_roleRelationFilter = {
    is?: Professor_roleWhereInput
    isNot?: Professor_roleWhereInput
  }

  export type ResearchCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    pagesNumper?: SortOrder
    publisher?: SortOrder
    magazinName?: SortOrder
    magazinVolume?: SortOrder
    publishYear?: SortOrder
    majoring?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ResearchAvgOrderByAggregateInput = {
    id?: SortOrder
    pagesNumper?: SortOrder
    publishYear?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ResearchMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    pagesNumper?: SortOrder
    publisher?: SortOrder
    magazinName?: SortOrder
    magazinVolume?: SortOrder
    publishYear?: SortOrder
    majoring?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ResearchMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    pagesNumper?: SortOrder
    publisher?: SortOrder
    magazinName?: SortOrder
    magazinVolume?: SortOrder
    publishYear?: SortOrder
    majoring?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ResearchSumOrderByAggregateInput = {
    id?: SortOrder
    pagesNumper?: SortOrder
    publishYear?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    projectId?: SortOrder
    projectName?: SortOrder
    description?: SortOrder
    topic?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    affiliate?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    projectId?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    projectId?: SortOrder
    projectName?: SortOrder
    description?: SortOrder
    topic?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    affiliate?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    projectId?: SortOrder
    projectName?: SortOrder
    description?: SortOrder
    topic?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    affiliate?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    projectId?: SortOrder
    typeId?: SortOrder
    departmentId?: SortOrder
    professorRoleId?: SortOrder
    authorId?: SortOrder
    supervisorId?: SortOrder
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ResearchNullableRelationFilter = {
    is?: ResearchWhereInput | null
    isNot?: ResearchWhereInput | null
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessorNullableRelationFilter = {
    is?: ProfessorWhereInput | null
    isNot?: ProfessorWhereInput | null
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    HeadId?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    HeadId?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    HeadId?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    HeadId?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    HeadId?: SortOrder
  }

  export type Professor_roleCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type Professor_roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Professor_roleMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type Professor_roleMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type Professor_roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServayCountOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type ServayAvgOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type ServayMaxOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type ServayMinOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type ServaySumOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
    rateId?: SortOrder
    questionId?: SortOrder
  }

  export type RateCountOrderByAggregateInput = {
    id?: SortOrder
    rateType?: SortOrder
    avareage?: SortOrder
  }

  export type RateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RateMaxOrderByAggregateInput = {
    id?: SortOrder
    rateType?: SortOrder
    avareage?: SortOrder
  }

  export type RateMinOrderByAggregateInput = {
    id?: SortOrder
    rateType?: SortOrder
    avareage?: SortOrder
  }

  export type RateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartmentCreateNestedOneWithoutProfessorDepartmentInput = {
    create?: XOR<DepartmentCreateWithoutProfessorDepartmentInput, DepartmentUncheckedCreateWithoutProfessorDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProfessorDepartmentInput
    connect?: DepartmentWhereUniqueInput
  }

  export type Professor_attachmentCreateNestedOneWithoutProfessorInput = {
    create?: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutProfessorInput
    connect?: Professor_attachmentWhereUniqueInput
  }

  export type ResearchCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput> | ResearchCreateWithoutSupervisorInput[] | ResearchUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutSupervisorInput | ResearchCreateOrConnectWithoutSupervisorInput[]
    createMany?: ResearchCreateManySupervisorInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type ResearchCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput> | ResearchCreateWithoutAuthorInput[] | ResearchUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutAuthorInput | ResearchCreateOrConnectWithoutAuthorInput[]
    createMany?: ResearchCreateManyAuthorInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput> | ProjectCreateWithoutSupervisorInput[] | ProjectUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSupervisorInput | ProjectCreateOrConnectWithoutSupervisorInput[]
    createMany?: ProjectCreateManySupervisorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput = {
    create?: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutProfessorInput
    connect?: Professor_attachmentWhereUniqueInput
  }

  export type ResearchUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput> | ResearchCreateWithoutSupervisorInput[] | ResearchUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutSupervisorInput | ResearchCreateOrConnectWithoutSupervisorInput[]
    createMany?: ResearchCreateManySupervisorInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type ResearchUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput> | ResearchCreateWithoutAuthorInput[] | ResearchUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutAuthorInput | ResearchCreateOrConnectWithoutAuthorInput[]
    createMany?: ResearchCreateManyAuthorInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput> | ProjectCreateWithoutSupervisorInput[] | ProjectUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSupervisorInput | ProjectCreateOrConnectWithoutSupervisorInput[]
    createMany?: ProjectCreateManySupervisorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput = {
    create?: XOR<DepartmentCreateWithoutProfessorDepartmentInput, DepartmentUncheckedCreateWithoutProfessorDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProfessorDepartmentInput
    upsert?: DepartmentUpsertWithoutProfessorDepartmentInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutProfessorDepartmentInput, DepartmentUpdateWithoutProfessorDepartmentInput>, DepartmentUncheckedUpdateWithoutProfessorDepartmentInput>
  }

  export type Professor_attachmentUpdateOneWithoutProfessorNestedInput = {
    create?: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutProfessorInput
    upsert?: Professor_attachmentUpsertWithoutProfessorInput
    disconnect?: Professor_attachmentWhereInput | boolean
    delete?: Professor_attachmentWhereInput | boolean
    connect?: Professor_attachmentWhereUniqueInput
    update?: XOR<XOR<Professor_attachmentUpdateToOneWithWhereWithoutProfessorInput, Professor_attachmentUpdateWithoutProfessorInput>, Professor_attachmentUncheckedUpdateWithoutProfessorInput>
  }

  export type ResearchUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput> | ResearchCreateWithoutSupervisorInput[] | ResearchUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutSupervisorInput | ResearchCreateOrConnectWithoutSupervisorInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutSupervisorInput | ResearchUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ResearchCreateManySupervisorInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutSupervisorInput | ResearchUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutSupervisorInput | ResearchUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type ResearchUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput> | ResearchCreateWithoutAuthorInput[] | ResearchUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutAuthorInput | ResearchCreateOrConnectWithoutAuthorInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutAuthorInput | ResearchUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ResearchCreateManyAuthorInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutAuthorInput | ResearchUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutAuthorInput | ResearchUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAuthorInput | ProjectUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAuthorInput | ProjectUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAuthorInput | ProjectUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput> | ProjectCreateWithoutSupervisorInput[] | ProjectUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSupervisorInput | ProjectCreateOrConnectWithoutSupervisorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutSupervisorInput | ProjectUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ProjectCreateManySupervisorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutSupervisorInput | ProjectUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutSupervisorInput | ProjectUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DepartmentUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput = {
    create?: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutProfessorInput
    upsert?: Professor_attachmentUpsertWithoutProfessorInput
    disconnect?: Professor_attachmentWhereInput | boolean
    delete?: Professor_attachmentWhereInput | boolean
    connect?: Professor_attachmentWhereUniqueInput
    update?: XOR<XOR<Professor_attachmentUpdateToOneWithWhereWithoutProfessorInput, Professor_attachmentUpdateWithoutProfessorInput>, Professor_attachmentUncheckedUpdateWithoutProfessorInput>
  }

  export type ResearchUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput> | ResearchCreateWithoutSupervisorInput[] | ResearchUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutSupervisorInput | ResearchCreateOrConnectWithoutSupervisorInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutSupervisorInput | ResearchUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ResearchCreateManySupervisorInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutSupervisorInput | ResearchUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutSupervisorInput | ResearchUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type ResearchUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput> | ResearchCreateWithoutAuthorInput[] | ResearchUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutAuthorInput | ResearchCreateOrConnectWithoutAuthorInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutAuthorInput | ResearchUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ResearchCreateManyAuthorInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutAuthorInput | ResearchUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutAuthorInput | ResearchUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput> | ProjectCreateWithoutAuthorInput[] | ProjectUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAuthorInput | ProjectCreateOrConnectWithoutAuthorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAuthorInput | ProjectUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAuthorInput | ProjectUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAuthorInput | ProjectUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput> | ProjectCreateWithoutSupervisorInput[] | ProjectUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSupervisorInput | ProjectCreateOrConnectWithoutSupervisorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutSupervisorInput | ProjectUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ProjectCreateManySupervisorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutSupervisorInput | ProjectUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutSupervisorInput | ProjectUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DegreeCreateNestedOneWithoutProfessorDegreeInput = {
    create?: XOR<DegreeCreateWithoutProfessorDegreeInput, DegreeUncheckedCreateWithoutProfessorDegreeInput>
    connectOrCreate?: DegreeCreateOrConnectWithoutProfessorDegreeInput
    connect?: DegreeWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutProfessorHasInput = {
    create?: XOR<ProfessorCreateWithoutProfessorHasInput, ProfessorUncheckedCreateWithoutProfessorHasInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorHasInput
    connect?: ProfessorWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DegreeUpdateOneRequiredWithoutProfessorDegreeNestedInput = {
    create?: XOR<DegreeCreateWithoutProfessorDegreeInput, DegreeUncheckedCreateWithoutProfessorDegreeInput>
    connectOrCreate?: DegreeCreateOrConnectWithoutProfessorDegreeInput
    upsert?: DegreeUpsertWithoutProfessorDegreeInput
    connect?: DegreeWhereUniqueInput
    update?: XOR<XOR<DegreeUpdateToOneWithWhereWithoutProfessorDegreeInput, DegreeUpdateWithoutProfessorDegreeInput>, DegreeUncheckedUpdateWithoutProfessorDegreeInput>
  }

  export type ProfessorUpdateOneRequiredWithoutProfessorHasNestedInput = {
    create?: XOR<ProfessorCreateWithoutProfessorHasInput, ProfessorUncheckedCreateWithoutProfessorHasInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorHasInput
    upsert?: ProfessorUpsertWithoutProfessorHasInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutProfessorHasInput, ProfessorUpdateWithoutProfessorHasInput>, ProfessorUncheckedUpdateWithoutProfessorHasInput>
  }

  export type Professor_attachmentCreateNestedOneWithoutDegreeInput = {
    create?: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutDegreeInput
    connect?: Professor_attachmentWhereUniqueInput
  }

  export type Professor_attachmentUncheckedCreateNestedOneWithoutDegreeInput = {
    create?: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutDegreeInput
    connect?: Professor_attachmentWhereUniqueInput
  }

  export type Professor_attachmentUpdateOneWithoutDegreeNestedInput = {
    create?: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutDegreeInput
    upsert?: Professor_attachmentUpsertWithoutDegreeInput
    disconnect?: Professor_attachmentWhereInput | boolean
    delete?: Professor_attachmentWhereInput | boolean
    connect?: Professor_attachmentWhereUniqueInput
    update?: XOR<XOR<Professor_attachmentUpdateToOneWithWhereWithoutDegreeInput, Professor_attachmentUpdateWithoutDegreeInput>, Professor_attachmentUncheckedUpdateWithoutDegreeInput>
  }

  export type Professor_attachmentUncheckedUpdateOneWithoutDegreeNestedInput = {
    create?: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
    connectOrCreate?: Professor_attachmentCreateOrConnectWithoutDegreeInput
    upsert?: Professor_attachmentUpsertWithoutDegreeInput
    disconnect?: Professor_attachmentWhereInput | boolean
    delete?: Professor_attachmentWhereInput | boolean
    connect?: Professor_attachmentWhereUniqueInput
    update?: XOR<XOR<Professor_attachmentUpdateToOneWithWhereWithoutDegreeInput, Professor_attachmentUpdateWithoutDegreeInput>, Professor_attachmentUncheckedUpdateWithoutDegreeInput>
  }

  export type TypeCreateNestedOneWithoutResearchInput = {
    create?: XOR<TypeCreateWithoutResearchInput, TypeUncheckedCreateWithoutResearchInput>
    connectOrCreate?: TypeCreateOrConnectWithoutResearchInput
    connect?: TypeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutResearchDepartmentInput = {
    create?: XOR<DepartmentCreateWithoutResearchDepartmentInput, DepartmentUncheckedCreateWithoutResearchDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutResearchDepartmentInput
    connect?: DepartmentWhereUniqueInput
  }

  export type Professor_roleCreateNestedOneWithoutResearchInput = {
    create?: XOR<Professor_roleCreateWithoutResearchInput, Professor_roleUncheckedCreateWithoutResearchInput>
    connectOrCreate?: Professor_roleCreateOrConnectWithoutResearchInput
    connect?: Professor_roleWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutProfessorResearchInput = {
    create?: XOR<ProfessorCreateWithoutProfessorResearchInput, ProfessorUncheckedCreateWithoutProfessorResearchInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorResearchInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutMasterResearchInput = {
    create?: XOR<ProfessorCreateWithoutMasterResearchInput, ProfessorUncheckedCreateWithoutMasterResearchInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutMasterResearchInput
    connect?: ProfessorWhereUniqueInput
  }

  export type TypeUpdateOneRequiredWithoutResearchNestedInput = {
    create?: XOR<TypeCreateWithoutResearchInput, TypeUncheckedCreateWithoutResearchInput>
    connectOrCreate?: TypeCreateOrConnectWithoutResearchInput
    upsert?: TypeUpsertWithoutResearchInput
    connect?: TypeWhereUniqueInput
    update?: XOR<XOR<TypeUpdateToOneWithWhereWithoutResearchInput, TypeUpdateWithoutResearchInput>, TypeUncheckedUpdateWithoutResearchInput>
  }

  export type DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput = {
    create?: XOR<DepartmentCreateWithoutResearchDepartmentInput, DepartmentUncheckedCreateWithoutResearchDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutResearchDepartmentInput
    upsert?: DepartmentUpsertWithoutResearchDepartmentInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutResearchDepartmentInput, DepartmentUpdateWithoutResearchDepartmentInput>, DepartmentUncheckedUpdateWithoutResearchDepartmentInput>
  }

  export type Professor_roleUpdateOneRequiredWithoutResearchNestedInput = {
    create?: XOR<Professor_roleCreateWithoutResearchInput, Professor_roleUncheckedCreateWithoutResearchInput>
    connectOrCreate?: Professor_roleCreateOrConnectWithoutResearchInput
    upsert?: Professor_roleUpsertWithoutResearchInput
    connect?: Professor_roleWhereUniqueInput
    update?: XOR<XOR<Professor_roleUpdateToOneWithWhereWithoutResearchInput, Professor_roleUpdateWithoutResearchInput>, Professor_roleUncheckedUpdateWithoutResearchInput>
  }

  export type ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput = {
    create?: XOR<ProfessorCreateWithoutProfessorResearchInput, ProfessorUncheckedCreateWithoutProfessorResearchInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorResearchInput
    upsert?: ProfessorUpsertWithoutProfessorResearchInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutProfessorResearchInput, ProfessorUpdateWithoutProfessorResearchInput>, ProfessorUncheckedUpdateWithoutProfessorResearchInput>
  }

  export type ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput = {
    create?: XOR<ProfessorCreateWithoutMasterResearchInput, ProfessorUncheckedCreateWithoutMasterResearchInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutMasterResearchInput
    upsert?: ProfessorUpsertWithoutMasterResearchInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutMasterResearchInput, ProfessorUpdateWithoutMasterResearchInput>, ProfessorUncheckedUpdateWithoutMasterResearchInput>
  }

  export type TypeCreateNestedOneWithoutProjectInput = {
    create?: XOR<TypeCreateWithoutProjectInput, TypeUncheckedCreateWithoutProjectInput>
    connectOrCreate?: TypeCreateOrConnectWithoutProjectInput
    connect?: TypeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutProjectDepartmentInput = {
    create?: XOR<DepartmentCreateWithoutProjectDepartmentInput, DepartmentUncheckedCreateWithoutProjectDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProjectDepartmentInput
    connect?: DepartmentWhereUniqueInput
  }

  export type Professor_roleCreateNestedOneWithoutProjectInput = {
    create?: XOR<Professor_roleCreateWithoutProjectInput, Professor_roleUncheckedCreateWithoutProjectInput>
    connectOrCreate?: Professor_roleCreateOrConnectWithoutProjectInput
    connect?: Professor_roleWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutGraduationProjectInput = {
    create?: XOR<ProfessorCreateWithoutGraduationProjectInput, ProfessorUncheckedCreateWithoutGraduationProjectInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutGraduationProjectInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutProfessorProjectInput = {
    create?: XOR<ProfessorCreateWithoutProfessorProjectInput, ProfessorUncheckedCreateWithoutProfessorProjectInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorProjectInput
    connect?: ProfessorWhereUniqueInput
  }

  export type TypeUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<TypeCreateWithoutProjectInput, TypeUncheckedCreateWithoutProjectInput>
    connectOrCreate?: TypeCreateOrConnectWithoutProjectInput
    upsert?: TypeUpsertWithoutProjectInput
    connect?: TypeWhereUniqueInput
    update?: XOR<XOR<TypeUpdateToOneWithWhereWithoutProjectInput, TypeUpdateWithoutProjectInput>, TypeUncheckedUpdateWithoutProjectInput>
  }

  export type DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput = {
    create?: XOR<DepartmentCreateWithoutProjectDepartmentInput, DepartmentUncheckedCreateWithoutProjectDepartmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProjectDepartmentInput
    upsert?: DepartmentUpsertWithoutProjectDepartmentInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutProjectDepartmentInput, DepartmentUpdateWithoutProjectDepartmentInput>, DepartmentUncheckedUpdateWithoutProjectDepartmentInput>
  }

  export type Professor_roleUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<Professor_roleCreateWithoutProjectInput, Professor_roleUncheckedCreateWithoutProjectInput>
    connectOrCreate?: Professor_roleCreateOrConnectWithoutProjectInput
    upsert?: Professor_roleUpsertWithoutProjectInput
    connect?: Professor_roleWhereUniqueInput
    update?: XOR<XOR<Professor_roleUpdateToOneWithWhereWithoutProjectInput, Professor_roleUpdateWithoutProjectInput>, Professor_roleUncheckedUpdateWithoutProjectInput>
  }

  export type ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput = {
    create?: XOR<ProfessorCreateWithoutGraduationProjectInput, ProfessorUncheckedCreateWithoutGraduationProjectInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutGraduationProjectInput
    upsert?: ProfessorUpsertWithoutGraduationProjectInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutGraduationProjectInput, ProfessorUpdateWithoutGraduationProjectInput>, ProfessorUncheckedUpdateWithoutGraduationProjectInput>
  }

  export type ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput = {
    create?: XOR<ProfessorCreateWithoutProfessorProjectInput, ProfessorUncheckedCreateWithoutProfessorProjectInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProfessorProjectInput
    upsert?: ProfessorUpsertWithoutProfessorProjectInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutProfessorProjectInput, ProfessorUpdateWithoutProfessorProjectInput>, ProfessorUncheckedUpdateWithoutProfessorProjectInput>
  }

  export type ProjectCreateNestedOneWithoutTypeInput = {
    create?: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTypeInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResearchCreateNestedOneWithoutTypeInput = {
    create?: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutTypeInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectUncheckedCreateNestedOneWithoutTypeInput = {
    create?: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTypeInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResearchUncheckedCreateNestedOneWithoutTypeInput = {
    create?: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutTypeInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutTypeNestedInput = {
    create?: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTypeInput
    upsert?: ProjectUpsertWithoutTypeInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTypeInput, ProjectUpdateWithoutTypeInput>, ProjectUncheckedUpdateWithoutTypeInput>
  }

  export type ResearchUpdateOneWithoutTypeNestedInput = {
    create?: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutTypeInput
    upsert?: ResearchUpsertWithoutTypeInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutTypeInput, ResearchUpdateWithoutTypeInput>, ResearchUncheckedUpdateWithoutTypeInput>
  }

  export type ProjectUncheckedUpdateOneWithoutTypeNestedInput = {
    create?: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTypeInput
    upsert?: ProjectUpsertWithoutTypeInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTypeInput, ProjectUpdateWithoutTypeInput>, ProjectUncheckedUpdateWithoutTypeInput>
  }

  export type ResearchUncheckedUpdateOneWithoutTypeNestedInput = {
    create?: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutTypeInput
    upsert?: ResearchUpsertWithoutTypeInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutTypeInput, ResearchUpdateWithoutTypeInput>, ResearchUncheckedUpdateWithoutTypeInput>
  }

  export type ProfessorCreateNestedOneWithoutDepartmentHeadInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentHeadInput, ProfessorUncheckedCreateWithoutDepartmentHeadInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentHeadInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ResearchCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutDepartmentInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProfessorUncheckedCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ResearchUncheckedCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutDepartmentInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectUncheckedCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProfessorUpdateOneRequiredWithoutDepartmentHeadNestedInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentHeadInput, ProfessorUncheckedCreateWithoutDepartmentHeadInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentHeadInput
    upsert?: ProfessorUpsertWithoutDepartmentHeadInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutDepartmentHeadInput, ProfessorUpdateWithoutDepartmentHeadInput>, ProfessorUncheckedUpdateWithoutDepartmentHeadInput>
  }

  export type ProfessorUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentInput
    upsert?: ProfessorUpsertWithoutDepartmentInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutDepartmentInput, ProfessorUpdateWithoutDepartmentInput>, ProfessorUncheckedUpdateWithoutDepartmentInput>
  }

  export type ResearchUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutDepartmentInput
    upsert?: ResearchUpsertWithoutDepartmentInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutDepartmentInput, ResearchUpdateWithoutDepartmentInput>, ResearchUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProjectUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentInput
    upsert?: ProjectUpsertWithoutDepartmentInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDepartmentInput, ProjectUpdateWithoutDepartmentInput>, ProjectUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProfessorUncheckedUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDepartmentInput
    upsert?: ProfessorUpsertWithoutDepartmentInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutDepartmentInput, ProfessorUpdateWithoutDepartmentInput>, ProfessorUncheckedUpdateWithoutDepartmentInput>
  }

  export type ResearchUncheckedUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutDepartmentInput
    upsert?: ResearchUpsertWithoutDepartmentInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutDepartmentInput, ResearchUpdateWithoutDepartmentInput>, ResearchUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProjectUncheckedUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentInput
    upsert?: ProjectUpsertWithoutDepartmentInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDepartmentInput, ProjectUpdateWithoutDepartmentInput>, ProjectUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProjectCreateNestedOneWithoutProfessorRoleInput = {
    create?: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProfessorRoleInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResearchCreateNestedOneWithoutProfessorRoleInput = {
    create?: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutProfessorRoleInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectUncheckedCreateNestedOneWithoutProfessorRoleInput = {
    create?: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProfessorRoleInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResearchUncheckedCreateNestedOneWithoutProfessorRoleInput = {
    create?: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutProfessorRoleInput
    connect?: ResearchWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutProfessorRoleNestedInput = {
    create?: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProfessorRoleInput
    upsert?: ProjectUpsertWithoutProfessorRoleInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProfessorRoleInput, ProjectUpdateWithoutProfessorRoleInput>, ProjectUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type ResearchUpdateOneWithoutProfessorRoleNestedInput = {
    create?: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutProfessorRoleInput
    upsert?: ResearchUpsertWithoutProfessorRoleInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutProfessorRoleInput, ResearchUpdateWithoutProfessorRoleInput>, ResearchUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type ProjectUncheckedUpdateOneWithoutProfessorRoleNestedInput = {
    create?: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProfessorRoleInput
    upsert?: ProjectUpsertWithoutProfessorRoleInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProfessorRoleInput, ProjectUpdateWithoutProfessorRoleInput>, ProjectUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type ResearchUncheckedUpdateOneWithoutProfessorRoleNestedInput = {
    create?: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
    connectOrCreate?: ResearchCreateOrConnectWithoutProfessorRoleInput
    upsert?: ResearchUpsertWithoutProfessorRoleInput
    disconnect?: ResearchWhereInput | boolean
    delete?: ResearchWhereInput | boolean
    connect?: ResearchWhereUniqueInput
    update?: XOR<XOR<ResearchUpdateToOneWithWhereWithoutProfessorRoleInput, ResearchUpdateWithoutProfessorRoleInput>, ResearchUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DepartmentCreateWithoutProfessorDepartmentInput = {
    name: string
    head: ProfessorCreateNestedOneWithoutDepartmentHeadInput
    ResearchDepartment?: ResearchCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutProfessorDepartmentInput = {
    id?: number
    name: string
    HeadId: number
    ResearchDepartment?: ResearchUncheckedCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutProfessorDepartmentInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutProfessorDepartmentInput, DepartmentUncheckedCreateWithoutProfessorDepartmentInput>
  }

  export type Professor_attachmentCreateWithoutProfessorInput = {
    ssn: number
    gender: string
    degreeDate: Date | string
    degree: DegreeCreateNestedOneWithoutProfessorDegreeInput
  }

  export type Professor_attachmentUncheckedCreateWithoutProfessorInput = {
    id?: number
    ssn: number
    gender: string
    degreeDate: Date | string
    degreeId: number
  }

  export type Professor_attachmentCreateOrConnectWithoutProfessorInput = {
    where: Professor_attachmentWhereUniqueInput
    create: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
  }

  export type ResearchCreateWithoutSupervisorInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    type: TypeCreateNestedOneWithoutResearchInput
    department: DepartmentCreateNestedOneWithoutResearchDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutResearchInput
    author: ProfessorCreateNestedOneWithoutProfessorResearchInput
  }

  export type ResearchUncheckedCreateWithoutSupervisorInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
  }

  export type ResearchCreateOrConnectWithoutSupervisorInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput>
  }

  export type ResearchCreateManySupervisorInputEnvelope = {
    data: ResearchCreateManySupervisorInput | ResearchCreateManySupervisorInput[]
    skipDuplicates?: boolean
  }

  export type ResearchCreateWithoutAuthorInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    type: TypeCreateNestedOneWithoutResearchInput
    department: DepartmentCreateNestedOneWithoutResearchDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutResearchInput
    supervisor: ProfessorCreateNestedOneWithoutMasterResearchInput
  }

  export type ResearchUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    supervisorId: number
  }

  export type ResearchCreateOrConnectWithoutAuthorInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput>
  }

  export type ResearchCreateManyAuthorInputEnvelope = {
    data: ResearchCreateManyAuthorInput | ResearchCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutAuthorInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    type: TypeCreateNestedOneWithoutProjectInput
    department: DepartmentCreateNestedOneWithoutProjectDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutProjectInput
    supervisor: ProfessorCreateNestedOneWithoutProfessorProjectInput
  }

  export type ProjectUncheckedCreateWithoutAuthorInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    supervisorId: number
  }

  export type ProjectCreateOrConnectWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectCreateManyAuthorInputEnvelope = {
    data: ProjectCreateManyAuthorInput | ProjectCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutSupervisorInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    type: TypeCreateNestedOneWithoutProjectInput
    department: DepartmentCreateNestedOneWithoutProjectDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutProjectInput
    author: ProfessorCreateNestedOneWithoutGraduationProjectInput
  }

  export type ProjectUncheckedCreateWithoutSupervisorInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
  }

  export type ProjectCreateOrConnectWithoutSupervisorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput>
  }

  export type ProjectCreateManySupervisorInputEnvelope = {
    data: ProjectCreateManySupervisorInput | ProjectCreateManySupervisorInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutHeadInput = {
    name: string
    ProfessorDepartment?: ProfessorCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutHeadInput = {
    id?: number
    name: string
    ProfessorDepartment?: ProfessorUncheckedCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchUncheckedCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
  }

  export type DepartmentUpsertWithoutProfessorDepartmentInput = {
    update: XOR<DepartmentUpdateWithoutProfessorDepartmentInput, DepartmentUncheckedUpdateWithoutProfessorDepartmentInput>
    create: XOR<DepartmentCreateWithoutProfessorDepartmentInput, DepartmentUncheckedCreateWithoutProfessorDepartmentInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutProfessorDepartmentInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutProfessorDepartmentInput, DepartmentUncheckedUpdateWithoutProfessorDepartmentInput>
  }

  export type DepartmentUpdateWithoutProfessorDepartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    head?: ProfessorUpdateOneRequiredWithoutDepartmentHeadNestedInput
    ResearchDepartment?: ResearchUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutProfessorDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    HeadId?: IntFieldUpdateOperationsInput | number
    ResearchDepartment?: ResearchUncheckedUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type Professor_attachmentUpsertWithoutProfessorInput = {
    update: XOR<Professor_attachmentUpdateWithoutProfessorInput, Professor_attachmentUncheckedUpdateWithoutProfessorInput>
    create: XOR<Professor_attachmentCreateWithoutProfessorInput, Professor_attachmentUncheckedCreateWithoutProfessorInput>
    where?: Professor_attachmentWhereInput
  }

  export type Professor_attachmentUpdateToOneWithWhereWithoutProfessorInput = {
    where?: Professor_attachmentWhereInput
    data: XOR<Professor_attachmentUpdateWithoutProfessorInput, Professor_attachmentUncheckedUpdateWithoutProfessorInput>
  }

  export type Professor_attachmentUpdateWithoutProfessorInput = {
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: DegreeUpdateOneRequiredWithoutProfessorDegreeNestedInput
  }

  export type Professor_attachmentUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    degreeId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: ResearchWhereUniqueInput
    update: XOR<ResearchUpdateWithoutSupervisorInput, ResearchUncheckedUpdateWithoutSupervisorInput>
    create: XOR<ResearchCreateWithoutSupervisorInput, ResearchUncheckedCreateWithoutSupervisorInput>
  }

  export type ResearchUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: ResearchWhereUniqueInput
    data: XOR<ResearchUpdateWithoutSupervisorInput, ResearchUncheckedUpdateWithoutSupervisorInput>
  }

  export type ResearchUpdateManyWithWhereWithoutSupervisorInput = {
    where: ResearchScalarWhereInput
    data: XOR<ResearchUpdateManyMutationInput, ResearchUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type ResearchScalarWhereInput = {
    AND?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
    OR?: ResearchScalarWhereInput[]
    NOT?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
    id?: IntFilter<"Research"> | number
    title?: StringFilter<"Research"> | string
    description?: StringFilter<"Research"> | string
    startDate?: DateTimeFilter<"Research"> | Date | string
    endDate?: DateTimeFilter<"Research"> | Date | string
    status?: StringFilter<"Research"> | string
    createdBy?: StringFilter<"Research"> | string
    pagesNumper?: IntFilter<"Research"> | number
    publisher?: StringFilter<"Research"> | string
    magazinName?: StringFilter<"Research"> | string
    magazinVolume?: StringFilter<"Research"> | string
    publishYear?: IntFilter<"Research"> | number
    majoring?: StringFilter<"Research"> | string
    typeId?: IntFilter<"Research"> | number
    departmentId?: IntFilter<"Research"> | number
    professorRoleId?: IntFilter<"Research"> | number
    authorId?: IntFilter<"Research"> | number
    supervisorId?: IntFilter<"Research"> | number
  }

  export type ResearchUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ResearchWhereUniqueInput
    update: XOR<ResearchUpdateWithoutAuthorInput, ResearchUncheckedUpdateWithoutAuthorInput>
    create: XOR<ResearchCreateWithoutAuthorInput, ResearchUncheckedCreateWithoutAuthorInput>
  }

  export type ResearchUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ResearchWhereUniqueInput
    data: XOR<ResearchUpdateWithoutAuthorInput, ResearchUncheckedUpdateWithoutAuthorInput>
  }

  export type ResearchUpdateManyWithWhereWithoutAuthorInput = {
    where: ResearchScalarWhereInput
    data: XOR<ResearchUpdateManyMutationInput, ResearchUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAuthorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    projectId?: IntFilter<"Project"> | number
    projectName?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    topic?: StringFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    status?: StringFilter<"Project"> | string
    createdBy?: StringFilter<"Project"> | string
    affiliate?: StringFilter<"Project"> | string
    typeId?: IntFilter<"Project"> | number
    departmentId?: IntFilter<"Project"> | number
    professorRoleId?: IntFilter<"Project"> | number
    authorId?: IntFilter<"Project"> | number
    supervisorId?: IntFilter<"Project"> | number
  }

  export type ProjectUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutSupervisorInput, ProjectUncheckedUpdateWithoutSupervisorInput>
    create: XOR<ProjectCreateWithoutSupervisorInput, ProjectUncheckedCreateWithoutSupervisorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutSupervisorInput, ProjectUncheckedUpdateWithoutSupervisorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutSupervisorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type DepartmentUpsertWithoutHeadInput = {
    update: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutHeadInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateWithoutHeadInput = {
    name?: StringFieldUpdateOperationsInput | string
    ProfessorDepartment?: ProfessorUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ProfessorDepartment?: ProfessorUncheckedUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUncheckedUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type DegreeCreateWithoutProfessorDegreeInput = {
    name: string
    university: string
  }

  export type DegreeUncheckedCreateWithoutProfessorDegreeInput = {
    id?: number
    name: string
    university: string
  }

  export type DegreeCreateOrConnectWithoutProfessorDegreeInput = {
    where: DegreeWhereUniqueInput
    create: XOR<DegreeCreateWithoutProfessorDegreeInput, DegreeUncheckedCreateWithoutProfessorDegreeInput>
  }

  export type ProfessorCreateWithoutProfessorHasInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutProfessorHasInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutProfessorHasInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutProfessorHasInput, ProfessorUncheckedCreateWithoutProfessorHasInput>
  }

  export type DegreeUpsertWithoutProfessorDegreeInput = {
    update: XOR<DegreeUpdateWithoutProfessorDegreeInput, DegreeUncheckedUpdateWithoutProfessorDegreeInput>
    create: XOR<DegreeCreateWithoutProfessorDegreeInput, DegreeUncheckedCreateWithoutProfessorDegreeInput>
    where?: DegreeWhereInput
  }

  export type DegreeUpdateToOneWithWhereWithoutProfessorDegreeInput = {
    where?: DegreeWhereInput
    data: XOR<DegreeUpdateWithoutProfessorDegreeInput, DegreeUncheckedUpdateWithoutProfessorDegreeInput>
  }

  export type DegreeUpdateWithoutProfessorDegreeInput = {
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type DegreeUncheckedUpdateWithoutProfessorDegreeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessorUpsertWithoutProfessorHasInput = {
    update: XOR<ProfessorUpdateWithoutProfessorHasInput, ProfessorUncheckedUpdateWithoutProfessorHasInput>
    create: XOR<ProfessorCreateWithoutProfessorHasInput, ProfessorUncheckedCreateWithoutProfessorHasInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutProfessorHasInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutProfessorHasInput, ProfessorUncheckedUpdateWithoutProfessorHasInput>
  }

  export type ProfessorUpdateWithoutProfessorHasInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutProfessorHasInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type Professor_attachmentCreateWithoutDegreeInput = {
    ssn: number
    gender: string
    degreeDate: Date | string
    professor: ProfessorCreateNestedOneWithoutProfessorHasInput
  }

  export type Professor_attachmentUncheckedCreateWithoutDegreeInput = {
    id?: number
    ssn: number
    gender: string
    degreeDate: Date | string
    professorId: number
  }

  export type Professor_attachmentCreateOrConnectWithoutDegreeInput = {
    where: Professor_attachmentWhereUniqueInput
    create: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
  }

  export type Professor_attachmentUpsertWithoutDegreeInput = {
    update: XOR<Professor_attachmentUpdateWithoutDegreeInput, Professor_attachmentUncheckedUpdateWithoutDegreeInput>
    create: XOR<Professor_attachmentCreateWithoutDegreeInput, Professor_attachmentUncheckedCreateWithoutDegreeInput>
    where?: Professor_attachmentWhereInput
  }

  export type Professor_attachmentUpdateToOneWithWhereWithoutDegreeInput = {
    where?: Professor_attachmentWhereInput
    data: XOR<Professor_attachmentUpdateWithoutDegreeInput, Professor_attachmentUncheckedUpdateWithoutDegreeInput>
  }

  export type Professor_attachmentUpdateWithoutDegreeInput = {
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneRequiredWithoutProfessorHasNestedInput
  }

  export type Professor_attachmentUncheckedUpdateWithoutDegreeInput = {
    id?: IntFieldUpdateOperationsInput | number
    ssn?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    degreeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: IntFieldUpdateOperationsInput | number
  }

  export type TypeCreateWithoutResearchInput = {
    name: string
    Project?: ProjectCreateNestedOneWithoutTypeInput
  }

  export type TypeUncheckedCreateWithoutResearchInput = {
    id?: number
    name: string
    Project?: ProjectUncheckedCreateNestedOneWithoutTypeInput
  }

  export type TypeCreateOrConnectWithoutResearchInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutResearchInput, TypeUncheckedCreateWithoutResearchInput>
  }

  export type DepartmentCreateWithoutResearchDepartmentInput = {
    name: string
    head: ProfessorCreateNestedOneWithoutDepartmentHeadInput
    ProfessorDepartment?: ProfessorCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutResearchDepartmentInput = {
    id?: number
    name: string
    HeadId: number
    ProfessorDepartment?: ProfessorUncheckedCreateNestedOneWithoutDepartmentInput
    ProjectDepartment?: ProjectUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutResearchDepartmentInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutResearchDepartmentInput, DepartmentUncheckedCreateWithoutResearchDepartmentInput>
  }

  export type Professor_roleCreateWithoutResearchInput = {
    role: string
    Project?: ProjectCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleUncheckedCreateWithoutResearchInput = {
    id?: number
    role: string
    Project?: ProjectUncheckedCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleCreateOrConnectWithoutResearchInput = {
    where: Professor_roleWhereUniqueInput
    create: XOR<Professor_roleCreateWithoutResearchInput, Professor_roleUncheckedCreateWithoutResearchInput>
  }

  export type ProfessorCreateWithoutProfessorResearchInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutProfessorResearchInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutProfessorResearchInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutProfessorResearchInput, ProfessorUncheckedCreateWithoutProfessorResearchInput>
  }

  export type ProfessorCreateWithoutMasterResearchInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutMasterResearchInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutMasterResearchInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutMasterResearchInput, ProfessorUncheckedCreateWithoutMasterResearchInput>
  }

  export type TypeUpsertWithoutResearchInput = {
    update: XOR<TypeUpdateWithoutResearchInput, TypeUncheckedUpdateWithoutResearchInput>
    create: XOR<TypeCreateWithoutResearchInput, TypeUncheckedCreateWithoutResearchInput>
    where?: TypeWhereInput
  }

  export type TypeUpdateToOneWithWhereWithoutResearchInput = {
    where?: TypeWhereInput
    data: XOR<TypeUpdateWithoutResearchInput, TypeUncheckedUpdateWithoutResearchInput>
  }

  export type TypeUpdateWithoutResearchInput = {
    name?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateOneWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateWithoutResearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateOneWithoutTypeNestedInput
  }

  export type DepartmentUpsertWithoutResearchDepartmentInput = {
    update: XOR<DepartmentUpdateWithoutResearchDepartmentInput, DepartmentUncheckedUpdateWithoutResearchDepartmentInput>
    create: XOR<DepartmentCreateWithoutResearchDepartmentInput, DepartmentUncheckedCreateWithoutResearchDepartmentInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutResearchDepartmentInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutResearchDepartmentInput, DepartmentUncheckedUpdateWithoutResearchDepartmentInput>
  }

  export type DepartmentUpdateWithoutResearchDepartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    head?: ProfessorUpdateOneRequiredWithoutDepartmentHeadNestedInput
    ProfessorDepartment?: ProfessorUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutResearchDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    HeadId?: IntFieldUpdateOperationsInput | number
    ProfessorDepartment?: ProfessorUncheckedUpdateOneWithoutDepartmentNestedInput
    ProjectDepartment?: ProjectUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type Professor_roleUpsertWithoutResearchInput = {
    update: XOR<Professor_roleUpdateWithoutResearchInput, Professor_roleUncheckedUpdateWithoutResearchInput>
    create: XOR<Professor_roleCreateWithoutResearchInput, Professor_roleUncheckedCreateWithoutResearchInput>
    where?: Professor_roleWhereInput
  }

  export type Professor_roleUpdateToOneWithWhereWithoutResearchInput = {
    where?: Professor_roleWhereInput
    data: XOR<Professor_roleUpdateWithoutResearchInput, Professor_roleUncheckedUpdateWithoutResearchInput>
  }

  export type Professor_roleUpdateWithoutResearchInput = {
    role?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUpdateOneWithoutProfessorRoleNestedInput
  }

  export type Professor_roleUncheckedUpdateWithoutResearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    Project?: ProjectUncheckedUpdateOneWithoutProfessorRoleNestedInput
  }

  export type ProfessorUpsertWithoutProfessorResearchInput = {
    update: XOR<ProfessorUpdateWithoutProfessorResearchInput, ProfessorUncheckedUpdateWithoutProfessorResearchInput>
    create: XOR<ProfessorCreateWithoutProfessorResearchInput, ProfessorUncheckedCreateWithoutProfessorResearchInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutProfessorResearchInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutProfessorResearchInput, ProfessorUncheckedUpdateWithoutProfessorResearchInput>
  }

  export type ProfessorUpdateWithoutProfessorResearchInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutProfessorResearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUpsertWithoutMasterResearchInput = {
    update: XOR<ProfessorUpdateWithoutMasterResearchInput, ProfessorUncheckedUpdateWithoutMasterResearchInput>
    create: XOR<ProfessorCreateWithoutMasterResearchInput, ProfessorUncheckedCreateWithoutMasterResearchInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutMasterResearchInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutMasterResearchInput, ProfessorUncheckedUpdateWithoutMasterResearchInput>
  }

  export type ProfessorUpdateWithoutMasterResearchInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutMasterResearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type TypeCreateWithoutProjectInput = {
    name: string
    Research?: ResearchCreateNestedOneWithoutTypeInput
  }

  export type TypeUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    Research?: ResearchUncheckedCreateNestedOneWithoutTypeInput
  }

  export type TypeCreateOrConnectWithoutProjectInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutProjectInput, TypeUncheckedCreateWithoutProjectInput>
  }

  export type DepartmentCreateWithoutProjectDepartmentInput = {
    name: string
    head: ProfessorCreateNestedOneWithoutDepartmentHeadInput
    ProfessorDepartment?: ProfessorCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutProjectDepartmentInput = {
    id?: number
    name: string
    HeadId: number
    ProfessorDepartment?: ProfessorUncheckedCreateNestedOneWithoutDepartmentInput
    ResearchDepartment?: ResearchUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutProjectDepartmentInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutProjectDepartmentInput, DepartmentUncheckedCreateWithoutProjectDepartmentInput>
  }

  export type Professor_roleCreateWithoutProjectInput = {
    role: string
    Research?: ResearchCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleUncheckedCreateWithoutProjectInput = {
    id?: number
    role: string
    Research?: ResearchUncheckedCreateNestedOneWithoutProfessorRoleInput
  }

  export type Professor_roleCreateOrConnectWithoutProjectInput = {
    where: Professor_roleWhereUniqueInput
    create: XOR<Professor_roleCreateWithoutProjectInput, Professor_roleUncheckedCreateWithoutProjectInput>
  }

  export type ProfessorCreateWithoutGraduationProjectInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutGraduationProjectInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutGraduationProjectInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutGraduationProjectInput, ProfessorUncheckedCreateWithoutGraduationProjectInput>
  }

  export type ProfessorCreateWithoutProfessorProjectInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutProfessorProjectInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutProfessorProjectInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutProfessorProjectInput, ProfessorUncheckedCreateWithoutProfessorProjectInput>
  }

  export type TypeUpsertWithoutProjectInput = {
    update: XOR<TypeUpdateWithoutProjectInput, TypeUncheckedUpdateWithoutProjectInput>
    create: XOR<TypeCreateWithoutProjectInput, TypeUncheckedCreateWithoutProjectInput>
    where?: TypeWhereInput
  }

  export type TypeUpdateToOneWithWhereWithoutProjectInput = {
    where?: TypeWhereInput
    data: XOR<TypeUpdateWithoutProjectInput, TypeUncheckedUpdateWithoutProjectInput>
  }

  export type TypeUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    Research?: ResearchUpdateOneWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Research?: ResearchUncheckedUpdateOneWithoutTypeNestedInput
  }

  export type DepartmentUpsertWithoutProjectDepartmentInput = {
    update: XOR<DepartmentUpdateWithoutProjectDepartmentInput, DepartmentUncheckedUpdateWithoutProjectDepartmentInput>
    create: XOR<DepartmentCreateWithoutProjectDepartmentInput, DepartmentUncheckedCreateWithoutProjectDepartmentInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutProjectDepartmentInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutProjectDepartmentInput, DepartmentUncheckedUpdateWithoutProjectDepartmentInput>
  }

  export type DepartmentUpdateWithoutProjectDepartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    head?: ProfessorUpdateOneRequiredWithoutDepartmentHeadNestedInput
    ProfessorDepartment?: ProfessorUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutProjectDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    HeadId?: IntFieldUpdateOperationsInput | number
    ProfessorDepartment?: ProfessorUncheckedUpdateOneWithoutDepartmentNestedInput
    ResearchDepartment?: ResearchUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type Professor_roleUpsertWithoutProjectInput = {
    update: XOR<Professor_roleUpdateWithoutProjectInput, Professor_roleUncheckedUpdateWithoutProjectInput>
    create: XOR<Professor_roleCreateWithoutProjectInput, Professor_roleUncheckedCreateWithoutProjectInput>
    where?: Professor_roleWhereInput
  }

  export type Professor_roleUpdateToOneWithWhereWithoutProjectInput = {
    where?: Professor_roleWhereInput
    data: XOR<Professor_roleUpdateWithoutProjectInput, Professor_roleUncheckedUpdateWithoutProjectInput>
  }

  export type Professor_roleUpdateWithoutProjectInput = {
    role?: StringFieldUpdateOperationsInput | string
    Research?: ResearchUpdateOneWithoutProfessorRoleNestedInput
  }

  export type Professor_roleUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    Research?: ResearchUncheckedUpdateOneWithoutProfessorRoleNestedInput
  }

  export type ProfessorUpsertWithoutGraduationProjectInput = {
    update: XOR<ProfessorUpdateWithoutGraduationProjectInput, ProfessorUncheckedUpdateWithoutGraduationProjectInput>
    create: XOR<ProfessorCreateWithoutGraduationProjectInput, ProfessorUncheckedCreateWithoutGraduationProjectInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutGraduationProjectInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutGraduationProjectInput, ProfessorUncheckedUpdateWithoutGraduationProjectInput>
  }

  export type ProfessorUpdateWithoutGraduationProjectInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutGraduationProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUpsertWithoutProfessorProjectInput = {
    update: XOR<ProfessorUpdateWithoutProfessorProjectInput, ProfessorUncheckedUpdateWithoutProfessorProjectInput>
    create: XOR<ProfessorCreateWithoutProfessorProjectInput, ProfessorUncheckedCreateWithoutProfessorProjectInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutProfessorProjectInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutProfessorProjectInput, ProfessorUncheckedUpdateWithoutProfessorProjectInput>
  }

  export type ProfessorUpdateWithoutProfessorProjectInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutProfessorProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type ProjectCreateWithoutTypeInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    department: DepartmentCreateNestedOneWithoutProjectDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutProjectInput
    author: ProfessorCreateNestedOneWithoutGraduationProjectInput
    supervisor: ProfessorCreateNestedOneWithoutProfessorProjectInput
  }

  export type ProjectUncheckedCreateWithoutTypeInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ProjectCreateOrConnectWithoutTypeInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
  }

  export type ResearchCreateWithoutTypeInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    department: DepartmentCreateNestedOneWithoutResearchDepartmentInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutResearchInput
    author: ProfessorCreateNestedOneWithoutProfessorResearchInput
    supervisor: ProfessorCreateNestedOneWithoutMasterResearchInput
  }

  export type ResearchUncheckedCreateWithoutTypeInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    departmentId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ResearchCreateOrConnectWithoutTypeInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
  }

  export type ProjectUpsertWithoutTypeInput = {
    update: XOR<ProjectUpdateWithoutTypeInput, ProjectUncheckedUpdateWithoutTypeInput>
    create: XOR<ProjectCreateWithoutTypeInput, ProjectUncheckedCreateWithoutTypeInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTypeInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTypeInput, ProjectUncheckedUpdateWithoutTypeInput>
  }

  export type ProjectUpdateWithoutTypeInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutProjectNestedInput
    author?: ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTypeInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUpsertWithoutTypeInput = {
    update: XOR<ResearchUpdateWithoutTypeInput, ResearchUncheckedUpdateWithoutTypeInput>
    create: XOR<ResearchCreateWithoutTypeInput, ResearchUncheckedCreateWithoutTypeInput>
    where?: ResearchWhereInput
  }

  export type ResearchUpdateToOneWithWhereWithoutTypeInput = {
    where?: ResearchWhereInput
    data: XOR<ResearchUpdateWithoutTypeInput, ResearchUncheckedUpdateWithoutTypeInput>
  }

  export type ResearchUpdateWithoutTypeInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutResearchNestedInput
    author?: ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput
  }

  export type ResearchUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorCreateWithoutDepartmentHeadInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    department: DepartmentCreateNestedOneWithoutProfessorDepartmentInput
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
  }

  export type ProfessorUncheckedCreateWithoutDepartmentHeadInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    departmentId: number
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
  }

  export type ProfessorCreateOrConnectWithoutDepartmentHeadInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutDepartmentHeadInput, ProfessorUncheckedCreateWithoutDepartmentHeadInput>
  }

  export type ProfessorCreateWithoutDepartmentInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    professorHas?: Professor_attachmentCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentCreateNestedOneWithoutHeadInput
  }

  export type ProfessorUncheckedCreateWithoutDepartmentInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    specialty?: string | null
    phoneNumber?: string | null
    image?: string | null
    token: string
    professorHas?: Professor_attachmentUncheckedCreateNestedOneWithoutProfessorInput
    MasterResearch?: ResearchUncheckedCreateNestedManyWithoutSupervisorInput
    ProfessorResearch?: ResearchUncheckedCreateNestedManyWithoutAuthorInput
    GraduationProject?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    ProfessorProject?: ProjectUncheckedCreateNestedManyWithoutSupervisorInput
    DepartmentHead?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
  }

  export type ProfessorCreateOrConnectWithoutDepartmentInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
  }

  export type ResearchCreateWithoutDepartmentInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    type: TypeCreateNestedOneWithoutResearchInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutResearchInput
    author: ProfessorCreateNestedOneWithoutProfessorResearchInput
    supervisor: ProfessorCreateNestedOneWithoutMasterResearchInput
  }

  export type ResearchUncheckedCreateWithoutDepartmentInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ResearchCreateOrConnectWithoutDepartmentInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
  }

  export type ProjectCreateWithoutDepartmentInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    type: TypeCreateNestedOneWithoutProjectInput
    ProfessorRole: Professor_roleCreateNestedOneWithoutProjectInput
    author: ProfessorCreateNestedOneWithoutGraduationProjectInput
    supervisor: ProfessorCreateNestedOneWithoutProfessorProjectInput
  }

  export type ProjectUncheckedCreateWithoutDepartmentInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    professorRoleId: number
    authorId: number
    supervisorId: number
  }

  export type ProjectCreateOrConnectWithoutDepartmentInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
  }

  export type ProfessorUpsertWithoutDepartmentHeadInput = {
    update: XOR<ProfessorUpdateWithoutDepartmentHeadInput, ProfessorUncheckedUpdateWithoutDepartmentHeadInput>
    create: XOR<ProfessorCreateWithoutDepartmentHeadInput, ProfessorUncheckedCreateWithoutDepartmentHeadInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutDepartmentHeadInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutDepartmentHeadInput, ProfessorUncheckedUpdateWithoutDepartmentHeadInput>
  }

  export type ProfessorUpdateWithoutDepartmentHeadInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneRequiredWithoutProfessorDepartmentNestedInput
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutDepartmentHeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
  }

  export type ProfessorUpsertWithoutDepartmentInput = {
    update: XOR<ProfessorUpdateWithoutDepartmentInput, ProfessorUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ProfessorCreateWithoutDepartmentInput, ProfessorUncheckedCreateWithoutDepartmentInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutDepartmentInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutDepartmentInput, ProfessorUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProfessorUpdateWithoutDepartmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    professorHas?: Professor_attachmentUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUpdateOneWithoutHeadNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialty?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    professorHas?: Professor_attachmentUncheckedUpdateOneWithoutProfessorNestedInput
    MasterResearch?: ResearchUncheckedUpdateManyWithoutSupervisorNestedInput
    ProfessorResearch?: ResearchUncheckedUpdateManyWithoutAuthorNestedInput
    GraduationProject?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    ProfessorProject?: ProjectUncheckedUpdateManyWithoutSupervisorNestedInput
    DepartmentHead?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
  }

  export type ResearchUpsertWithoutDepartmentInput = {
    update: XOR<ResearchUpdateWithoutDepartmentInput, ResearchUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ResearchCreateWithoutDepartmentInput, ResearchUncheckedCreateWithoutDepartmentInput>
    where?: ResearchWhereInput
  }

  export type ResearchUpdateToOneWithWhereWithoutDepartmentInput = {
    where?: ResearchWhereInput
    data: XOR<ResearchUpdateWithoutDepartmentInput, ResearchUncheckedUpdateWithoutDepartmentInput>
  }

  export type ResearchUpdateWithoutDepartmentInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutResearchNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutResearchNestedInput
    author?: ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput
  }

  export type ResearchUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectUpsertWithoutDepartmentInput = {
    update: XOR<ProjectUpdateWithoutDepartmentInput, ProjectUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ProjectCreateWithoutDepartmentInput, ProjectUncheckedCreateWithoutDepartmentInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDepartmentInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDepartmentInput, ProjectUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProjectUpdateWithoutDepartmentInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutProjectNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutProjectNestedInput
    author?: ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDepartmentInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectCreateWithoutProfessorRoleInput = {
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    type: TypeCreateNestedOneWithoutProjectInput
    department: DepartmentCreateNestedOneWithoutProjectDepartmentInput
    author: ProfessorCreateNestedOneWithoutGraduationProjectInput
    supervisor: ProfessorCreateNestedOneWithoutProfessorProjectInput
  }

  export type ProjectUncheckedCreateWithoutProfessorRoleInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    authorId: number
    supervisorId: number
  }

  export type ProjectCreateOrConnectWithoutProfessorRoleInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
  }

  export type ResearchCreateWithoutProfessorRoleInput = {
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    type: TypeCreateNestedOneWithoutResearchInput
    department: DepartmentCreateNestedOneWithoutResearchDepartmentInput
    author: ProfessorCreateNestedOneWithoutProfessorResearchInput
    supervisor: ProfessorCreateNestedOneWithoutMasterResearchInput
  }

  export type ResearchUncheckedCreateWithoutProfessorRoleInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    authorId: number
    supervisorId: number
  }

  export type ResearchCreateOrConnectWithoutProfessorRoleInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
  }

  export type ProjectUpsertWithoutProfessorRoleInput = {
    update: XOR<ProjectUpdateWithoutProfessorRoleInput, ProjectUncheckedUpdateWithoutProfessorRoleInput>
    create: XOR<ProjectCreateWithoutProfessorRoleInput, ProjectUncheckedCreateWithoutProfessorRoleInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProfessorRoleInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProfessorRoleInput, ProjectUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type ProjectUpdateWithoutProfessorRoleInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutProjectNestedInput
    department?: DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput
    author?: ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProfessorRoleInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUpsertWithoutProfessorRoleInput = {
    update: XOR<ResearchUpdateWithoutProfessorRoleInput, ResearchUncheckedUpdateWithoutProfessorRoleInput>
    create: XOR<ResearchCreateWithoutProfessorRoleInput, ResearchUncheckedCreateWithoutProfessorRoleInput>
    where?: ResearchWhereInput
  }

  export type ResearchUpdateToOneWithWhereWithoutProfessorRoleInput = {
    where?: ResearchWhereInput
    data: XOR<ResearchUpdateWithoutProfessorRoleInput, ResearchUncheckedUpdateWithoutProfessorRoleInput>
  }

  export type ResearchUpdateWithoutProfessorRoleInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutResearchNestedInput
    department?: DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput
    author?: ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput
  }

  export type ResearchUncheckedUpdateWithoutProfessorRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchCreateManySupervisorInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
  }

  export type ResearchCreateManyAuthorInput = {
    id?: number
    title: string
    description: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    pagesNumper: number
    publisher: string
    magazinName: string
    magazinVolume: string
    publishYear: number
    majoring: string
    typeId: number
    departmentId: number
    professorRoleId: number
    supervisorId: number
  }

  export type ProjectCreateManyAuthorInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    supervisorId: number
  }

  export type ProjectCreateManySupervisorInput = {
    projectId?: number
    projectName: string
    description: string
    topic: string
    startDate: Date | string
    endDate: Date | string
    status: string
    createdBy: string
    affiliate: string
    typeId: number
    departmentId: number
    professorRoleId: number
    authorId: number
  }

  export type ResearchUpdateWithoutSupervisorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutResearchNestedInput
    department?: DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutResearchNestedInput
    author?: ProfessorUpdateOneRequiredWithoutProfessorResearchNestedInput
  }

  export type ResearchUncheckedUpdateWithoutSupervisorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUncheckedUpdateManyWithoutSupervisorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutResearchNestedInput
    department?: DepartmentUpdateOneRequiredWithoutResearchDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutResearchNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutMasterResearchNestedInput
  }

  export type ResearchUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ResearchUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    pagesNumper?: IntFieldUpdateOperationsInput | number
    publisher?: StringFieldUpdateOperationsInput | string
    magazinName?: StringFieldUpdateOperationsInput | string
    magazinVolume?: StringFieldUpdateOperationsInput | string
    publishYear?: IntFieldUpdateOperationsInput | number
    majoring?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectUpdateWithoutAuthorInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutProjectNestedInput
    department?: DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutProjectNestedInput
    supervisor?: ProfessorUpdateOneRequiredWithoutProfessorProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAuthorInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectUncheckedUpdateManyWithoutAuthorInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    supervisorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectUpdateWithoutSupervisorInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutProjectNestedInput
    department?: DepartmentUpdateOneRequiredWithoutProjectDepartmentNestedInput
    ProfessorRole?: Professor_roleUpdateOneRequiredWithoutProjectNestedInput
    author?: ProfessorUpdateOneRequiredWithoutGraduationProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSupervisorInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProjectUncheckedUpdateManyWithoutSupervisorInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    affiliate?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    professorRoleId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProfessorCountOutputTypeDefaultArgs instead
     */
    export type ProfessorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessorDefaultArgs instead
     */
    export type ProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Professor_attachmentDefaultArgs instead
     */
    export type Professor_attachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Professor_attachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DegreeDefaultArgs instead
     */
    export type DegreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DegreeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResearchDefaultArgs instead
     */
    export type ResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeDefaultArgs instead
     */
    export type TypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Professor_roleDefaultArgs instead
     */
    export type Professor_roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Professor_roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServayDefaultArgs instead
     */
    export type ServayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RateDefaultArgs instead
     */
    export type RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}